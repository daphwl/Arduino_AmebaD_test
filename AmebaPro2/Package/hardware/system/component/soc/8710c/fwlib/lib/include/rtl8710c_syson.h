/*
 * Copyright(c) 2007 - 2018 Realtek Corporation. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0 
 * Licensed under the Apache License, Version 2.0 (the License); you may 
 * not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT 
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 *
 * @file     rtl8710c_syson.h
 * @brief    CMSIS HeaderFile
 * @version  1.0
 * @date     26. April 2019
 * @note     Generated by SVDConv V3.3.13 on Friday, 26.04.2019 20:00:13
 *           from File 'rtl8710c_syson.svd',
 *           last modified on Friday, 26.04.2019 11:55:35
 */

#ifndef RTL8710C_SYSON_H
#define RTL8710C_SYSON_H

#ifdef __cplusplus
extern "C" {
#endif

/// @cond DOXYGEN_SYSON_REG_TYPE

/** @addtogroup hs_hal_syson SysOn Functions
  * @ingroup 8710c_hal
  * @{
  */


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/** @addtogroup hal_syson_reg SysOn Registers
  * @ingroup hs_hal_syson
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           SYSON                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief SOC System Control (SYSON)
  */

typedef struct {                                /*!< (@ 0x40000000) SYSON Structure                                            */
  
  union {
    __IOM uint32_t sys_pwr_iso_ctrl;            /*!< (@ 0x00000000) System Power and Isolation Control Register                */
    
    struct {
      __IM  uint32_t            : 8;
      __IOM uint32_t pon_spc_en : 1;            /*!< [8..8] 1:enable peripheral on domain small power cut                      */
      __IOM uint32_t pon_lpc_en : 1;            /*!< [9..9] 1:enable peripheral on domain large power cut                      */
      __IOM uint32_t soc_spc_en : 1;            /*!< [10..10] 1:enable SOC domain small power cut                              */
      __IOM uint32_t soc_lpc_en : 1;            /*!< [11..11] 1:enable SOC domain large power cut                              */
      __IM  uint32_t            : 4;
      __IOM uint32_t sys_iso_peon : 1;          /*!< [16..16] description                                                      */
      __IOM uint32_t sys_iso_ret_mem : 1;       /*!< [17..17] 1: isolation retention memroy to SOC domain; 0: disable
                                                     isolation                                                                 */
      __IOM uint32_t sys_iso_soc : 1;           /*!< [18..18] 1: isolation SOC to PEON domain; 0: disable isolation            */
      __IM  uint32_t            : 2;
      __IOM uint32_t sys_iso_128k_osc : 1;      /*!< [21..21] 1: isolation 128K NCO's input signal to syson; 0:disable
                                                     isolation                                                                 */
      __IOM uint32_t sys_iso_xtal : 1;          /*!< [22..22] 1: isolatino XTAL to SYSON; 0: disable isolation                 */
      __IOM uint32_t sys_iso_syspll : 1;        /*!< [23..23] 1: isolatino SYSPLL to SYSON; 0: disable isolation               */
    } sys_pwr_iso_ctrl_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t sys_func_en;                 /*!< (@ 0x00000008) System Function Control Register                           */
    
    struct {
      __IOM uint32_t sys_fen_eeldr : 1;         /*!< [0..0] 1: enable EE Loader; 0: disable EE loader                          */
      __IM  uint32_t            : 3;
      __IOM uint32_t soc_syspeon_en : 1;        /*!< [4..4] 1: enable SYSTEM to APB0                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t lp_timer_en : 1;           /*!< [6..6] 1: enable Lptimer                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpio_en    : 1;            /*!< [8..8] 1: enable GPIO macro                                               */
      __IOM uint32_t gpio_rst_mux : 1;          /*!< [9..9] 1: Mask WDOG_RST to reset GPIO block                               */
      __IM  uint32_t            : 14;
      __IOM uint32_t sys_fen_sic : 1;           /*!< [24..24] 1: enable SIC function enable; 0: reset                          */
      __IOM uint32_t sys_fen_sic_mst : 1;       /*!< [25..25] 1: enable SIC to access register by CPU                          */
      __IM  uint32_t            : 5;
      __IOM uint32_t sys_amacro_en : 1;         /*!< [31..31] Analog IP PWD_B, REGU hw_pdb_12                                  */
    } sys_func_en_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t sys_clk_ctrl0;               /*!< (@ 0x00000010) System Clock Control Register0                             */
    
    struct {
      __IOM uint32_t syson_ck_sysreg_en : 1;    /*!< [0..0] 1: Enable SYSON register clock; 0: gated SYSON Register
                                                     clock                                                                     */
      __IOM uint32_t syson_ck_eeldr_en : 1;     /*!< [1..1] 1: enable EE LDR clock; 0: gated EE LDR clock                      */
      __IOM uint32_t soc_ocp_iobus_ck_en : 1;   /*!< [2..2] 1: enable to generate CPU/BUS clock from PLL clock                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t lp_timer_sclk_en : 1;      /*!< [4..4] 1: enable LP timer 32K clk                                         */
      __IOM uint32_t lp_timer_pclk_en : 1;      /*!< [5..5] 1: enable LP timer pclk                                            */
      __IOM uint32_t lp_timer_intclk_sel : 1;   /*!< [6..6] 1: 32k; 0: pclk                                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t soc_dbclk_gpio_en : 1;     /*!< [8..8] 1: enable gpio db32 clock                                          */
      __IOM uint32_t soc_pclk_gpio_en : 1;      /*!< [9..9] 1: enable gpio pclock                                              */
      __IOM uint32_t soc_intclk_gpio_sel : 1;   /*!< [10..10] 0: apb clk; 1 debounce clk                                       */
    } sys_clk_ctrl0_b;
  } ;
  
  union {
    __IOM uint32_t sys_clk_ctrl1;               /*!< (@ 0x00000014) System Clock Control Register1                             */
    
    struct {
      __IOM uint32_t pesoc_eeldr_ck_sel : 1;    /*!< [0..0] 1: 4Mhz divide by 16, 0: 4Mhz                                      */
      __IM  uint32_t            : 7;
      __IOM uint32_t extclk_32k : 1;            /*!< [8..8] 1: use external 32k; 0: use internal 32k                           */
    } sys_clk_ctrl1_b;
  } ;
  __IM  uint32_t  RESERVED2[2];
  
  union {
    __IOM uint32_t sys_efuse_syscfg0;           /*!< (@ 0x00000020) System Configuration eFuse Load Register0                  */
    
    struct {
      __IOM uint32_t secure_efuse_reg_check_dis : 1;/*!< [0..0] 1: Disable secure register check (Default). 0: Enable
                                                     secure register check. This register just can be written
                                                     once. After that, hardware will disable the writing function.             */
      __IOM uint32_t sic_secure_dis : 1;        /*!< [1..1] 1: Enable that SIC is secure mode (Default). 0: Disable
                                                     that SIC is secure mode. This register just can be written
                                                     once. After that, hardware will disable the writing function.             */
      __IOM uint32_t secure_jtag_swd_mode : 2;  /*!< [3..2] 3 or 2: Enable secure world JTAG/SWD (Default). 1: Enable
                                                     password secure world JTAG/SWD. 0: disable secure world
                                                     JTAG/SWD. This register just can be written once. After
                                                     that, hardware will disable the writing function.                         */
      __IOM uint32_t non_secure_jtag_swd_mode : 2;/*!< [5..4] 3 or 2: Enable non-secure world JTAG/SWD (Default). 1:
                                                     Enable password non-secure world JTAG/SWD. 0: disable non-secure
                                                     world JTAG/SWD. This register just can be written once.
                                                     After that, hardware will disable the writing function.                   */
      __IOM uint32_t fixed_key_dis : 1;         /*!< [6..6] 0: DAP Protection IP cannot request Efuse Key Control
                                                     to read the efuse key. The key will be stored into register.
                                                     The length of key: 256 bits. 1: DAP Protection IP can request
                                                     Efuse Key Control to read the efuse key. The length of
                                                     key: 128 bits. This register just can be written once.
                                                     After that, hardware will disable the writing function.                   */
      __IM  uint32_t            : 9;
      __IOM uint32_t efuse_id0  : 8;            /*!< [23..16] Efuse ID byte0, expect ID: 0x10                                  */
      __IOM uint32_t efuse_id1  : 8;            /*!< [31..24] Efuse ID byte1, expect ID: 0x87                                  */
    } sys_efuse_syscfg0_b;
  } ;
  
  union {
    __IOM uint32_t sys_efuse_syscfg1;           /*!< (@ 0x00000024) System Configuration eFuse Load Register1                  */
    
    struct {
      __IOM uint32_t sys_regu_par_03_00_ldoaon_adj : 4;/*!< [3..0] LDOH12 voltage select Digital LDO voltage 0000: 0.600V
                                                     0001: 0.631V 0010: 0.660V 0011: 0.692V 0100: 0.719V 0101:
                                                     0.749V 0110: 0.782V 0111: 0.817V 1000: 0.856V 1001: 0.899V
                                                     1010: 0.952V 1011: 0.998V 1100: 1.049V 1101: 1.096V 1110:
                                                     1.149V 1111: 1.196V                                                       */
      __IOM uint32_t sys_regu_par_08_05_ldo25e_adj : 4;/*!< [7..4] LDOE25 voltage select 0000: 3.30V 0001: 3.27V 0010: 3.05V
                                                     0011: 2.86V 0100: 2.69V 0101: 2.54V 0110: 2.4V 0111: 2.28V
                                                     1000: 2.17V 1001: 2.07V 1010: 1.98V 1011: 1.89V 1100: 1.82V
                                                     1101: 1.74V 1110: 1.68V 1111: 1.62V                                       */
      __IOM uint32_t sys_regu_bod_th_sel : 4;   /*!< [11..8] 0000:0.5V 0001:2.6V 0010:2.65V 0011:2.7V 0100:2.75V
                                                     0101:2.8V 0110:2.85V 0111:2.9V 1000:2.95V 1001:3V Others:NONE             */
      __IOM uint32_t sys_vbat_sel : 2;          /*!< [13..12] 00:3.4V 01:3.3V default 10:3.2V 11:3.1V                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t sys_swr12_vol : 4;         /*!< [19..16] SWR/LDO 0000 0.965 0001 1.000 0010 1.037 0011 1.078
                                                     0100 1.100 0101 1.122 0110 1.146 0111 1.170 1000 1.196
                                                     1001 1.222 1010 1.250 1011 1.279 1100 1.310 1101 1.341
                                                     1110 1.375 1111 1.410                                                     */
      __IOM uint32_t sys_swr12_std : 2;         /*!< [21..20] STD_L1<1:0> time 00 96us 01 192us 10 768us 11 3.072ms            */
      __IOM uint32_t sys_swr12_in : 3;          /*!< [24..22] IN_L1<2:0> output 000 0.425 001 0.450 010 0.475 011
                                                     0.500 100 0.525 101 0.550 110 0.575 111 0.600                             */
      __IOM uint32_t sys_spsldo_vol : 3;        /*!< [27..25] <44> <11:9> LDO 0 000 0.600 0 001 0.631 0 010 0.660
                                                     0 011 0.692 0 100 0.719 0 101 0.749 0 110 0.782 0 111 0.817
                                                     1 000 0.856 1 001 0.899 1 010 0.952 1 011 0.998 1 100 1.049
                                                     1 101 1.096 1 110 1.149 1 111 1.196                                       */
      __IOM uint32_t sys_swr12_fpwm_md : 1;     /*!< [28..28] reg_auto_L=0 FPWM_L1 = 1 => force PWM FPWM_L1 = 0 =>
                                                     force PFM                                                                 */
      __IOM uint32_t sys_swr12_ocp_en : 1;      /*!< [29..29] 1: enable over current protection                                */
      __IOM uint32_t sys_swr12_pow_zcd : 1;     /*!< [30..30] Enable ZCD                                                       */
      __IOM uint32_t sys_sw12_auto_mode : 1;    /*!< [31..31] 0:force PWM or PFM 1:auto                                        */
    } sys_efuse_syscfg1_b;
  } ;
  
  union {
    __IOM uint32_t sys_efuse_syscfg2;           /*!< (@ 0x00000028) System Configuration eFuse Load Register2                  */
    
    struct {
      __IOM uint32_t sys_xtal_sc_xi : 7;        /*!< [6..0] 1:add cap, 0:degrade cap. (200fF per unit)                         */
      __IOM uint32_t sys_xtal_sc_xo : 7;        /*!< [13..7] 1:add cap, 0:degrade cap. (200fF per unit)                        */
      __IOM uint32_t xtal_xoxi_cfix : 1;        /*!< [14..14] 1: turn XOXI Cfix single side 6.6pF                              */
      __IOM uint32_t xtal_ck_sel : 3;           /*!< [17..15] aac settling cycles (4M ring) 000: 2^8 100: 2^12 001:
                                                     2^9 101: 2^13 010: 2^10 110: 2^ 14 011: 2^11 (512us / for
                                                     4MHz) 111: 2^15                                                           */
      __IOM uint32_t xtal_aac_en : 1;           /*!< [18..18] 1:enable aac digital circuit                                     */
      __IOM uint32_t pk_start_ar : 2;           /*!< [20..19] AACK peak sel start (star>end)                                   */
      __IOM uint32_t pk_end_ar  : 2;            /*!< [22..21] AACK peak sel end (star>end)                                     */
      __IOM uint32_t sw_rsvd    : 9;            /*!< [31..23] Reserved for software                                            */
    } sys_efuse_syscfg2_b;
  } ;
  
  union {
    __IOM uint32_t sys_efuse_syscfg3;           /*!< (@ 0x0000002C) System Configuration eFuse Load Register3                  */
    
    struct {
      __IOM uint32_t pll_enc_c3_set : 2;        /*!< [1..0] Cp selection. Default=5p 00: Cp=3p, 01: Cp=4p, 10: Cp=5p,
                                                     11: Cp=6p                                                                 */
      __IOM uint32_t pll_enc_r3_sel : 3;        /*!< [4..2] R3 selection. Default=1k 000: R3=0k, 001: R3=0.5k, 010:
                                                     R3=1k, 011: R3=1.5k, 100: R3=2k, 101: R3=2.5k, 110: R3=3k,
                                                     111: R3=3.5k;                                                             */
      __IOM uint32_t pll_enc_cs_sel : 2;        /*!< [6..5] Cs selection. Default=50p 00: Cs=30p, 01: Cs=40p, 10:
                                                     Cs=50p, 11: Cs=60p                                                        */
      __IOM uint32_t pll_enc_rs_sel : 3;        /*!< [9..7] Rs selection. Default=14k 000: Rs=2k, 001: Rs=4k, 010:
                                                     Rs=6k, 011: Rs=8k, 100: Rs=10k, 101: Rs=12k, 110: Rs=14k,
                                                     111: Rs=16k;                                                              */
      __IOM uint32_t pll_enc_cp_sel : 2;        /*!< [11..10] Cp selection. Default=3p 00: Cp=3p, 01: Cp=4p, 10:
                                                     Cp=5p, 11: Cp=6p                                                          */
      __IOM uint32_t pll_enc_cpc_sel : 3;       /*!< [14..12] charge pump current selection . Default=5u CP current
                                                     select : 000: Icp=5uA, 001: Icp=10uA, 010: Icp=15uA, 011:
                                                     Icp=20uA; 100:Icp=25uA, 101: Icp=30uA, 110: Icp=35uA, 111:
                                                     Icp=40uA;                                                                 */
      __IOM uint32_t xtal_sel   : 1;            /*!< [15..15] Indicate xtal frequency 0: 40MHz ==> PLL1[31:28] =
                                                     4'b0000 1: 26Mhz ==> PLL1[31:28] = 4'b 0101                               */
      __IOM uint32_t pll_enc_ref_clk_sel : 1;   /*!< [16..16] 0-> select special route , 1-> digital APR                       */
      __IOM uint32_t pll_enc_sp_r_enb : 1;      /*!< [17..17] 0-> enable special route ,1-> disable special route              */
      __IOM uint32_t sw_rsvd    : 14;           /*!< [31..18] Reserved for software                                            */
    } sys_efuse_syscfg3_b;
  } ;
  
  union {
    __IOM uint32_t sys_efuse_syscfg4;           /*!< (@ 0x00000030) System Configuration eFuse Load Register4                  */
    
    struct {
      __IOM uint32_t debug_port_select : 8;     /*!< [7..0] Debug port select                                                  */
      __IOM uint32_t dbgio_groupa_enable : 1;   /*!< [8..8] enable debug IO[3:0] A0, A1, A13, A14                              */
      __IOM uint32_t dbgio_groupb_enable : 1;   /*!< [9..9] enable debug IO[7:4] A15, A16, A7, A8                              */
      __IOM uint32_t dbgio_groupc_enable : 1;   /*!< [10..10] enable debug IO[11:8] A10, A11, A2, A3                           */
      __IOM uint32_t dbgio_groupd_enable : 1;   /*!< [11..11] enable debug IO[15:12] A9, A12, A21, A22                         */
      __IM  uint32_t            : 4;
      __IOM uint32_t dbgio_a_signal_sel : 4;    /*!< [19..16] 0000: DBG[3:0] 0001: DBG[7:4] 0010: DBG[11:8] 0011:
                                                     DBG[15:12] 0100: DBG[19:16] 0101: DBG[23:20] 0110: DBG[27:24]
                                                     0111: DBG[31:28]                                                          */
      __IOM uint32_t dbgio_b_signal_sel : 4;    /*!< [23..20] 0000: DBG[3:0] 0001: DBG[7:4] 0010: DBG[11:8] 0011:
                                                     DBG[15:12] 0100: DBG[19:16] 0101: DBG[23:20] 0110: DBG[27:24]
                                                     0111: DBG[31:28]                                                          */
      __IOM uint32_t dbgio_c_signal_sel : 4;    /*!< [27..24] 0000: DBG[3:0] 0001: DBG[7:4] 0010: DBG[11:8] 0011:
                                                     DBG[15:12] 0100: DBG[19:16] 0101: DBG[23:20] 0110: DBG[27:24]
                                                     0111: DBG[31:28]                                                          */
      __IOM uint32_t dbgio_d_signal_sel : 4;    /*!< [31..28] 0000: DBG[3:0] 0001: DBG[7:4] 0010: DBG[11:8] 0011:
                                                     DBG[15:12] 0100: DBG[19:16] 0101: DBG[23:20] 0110: DBG[27:24]
                                                     0111: DBG[31:28]                                                          */
    } sys_efuse_syscfg4_b;
  } ;
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  sys_efuse_syscfg6;            /*!< (@ 0x00000038) System Configuration eFuse Load Register6                  */
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t sys_regu_ctrl0;              /*!< (@ 0x00000040) System Regulator Control Register0                         */
    
    struct {
      __IOM uint32_t sys_regu_ldo25e_en : 1;    /*!< [0..0] 1: enable regulator LDO25E for Efuse programming                   */
      __IOM uint32_t sys_regu_pc_ef25_en : 1;   /*!< [1..1] 1: turn on power cut Efuse 25V                                     */
      __IM  uint32_t            : 16;
      __IOM uint32_t sys_regu_anack_4m_sel : 1; /*!< [18..18] 1: enable ANACK as 4MHz 0: enable ANACK output as 250KHz         */
      __IOM uint32_t sys_regu_anack_4m_en : 1;  /*!< [19..19] 1: enable ANACK 0: disable ANACK                                 */
    } sys_regu_ctrl0_b;
  } ;
  
  union {
    __IOM uint32_t sys_regu_ctrl1;              /*!< (@ 0x00000044) System Regulator Control Register1                         */
    
    struct {
      __IM  uint32_t            : 10;
      __IOM uint32_t h5_mod_sel : 2;            /*!< [11..10] 11:Iq< 1uA, Iout = 0uA 01:Iq= 1uA, Iout = <10uA 00:Iq=
                                                     5uA, Iout = 1mA                                                           */
      __IM  uint32_t            : 2;
      __IOM uint32_t h5_diode_en : 1;           /*!< [14..14] Enable diode soft start                                          */
    } sys_regu_ctrl1_b;
  } ;
  
  union {
    __IOM uint32_t sys_swr_ctrl0;               /*!< (@ 0x00000048) System Switching Regulator Control Register0               */
    
    struct {
      __IOM uint32_t sys_sldo_en : 1;           /*!< [0..0] 1: enable SLDO ; 0: disable SLDO                                   */
      __IOM uint32_t sys_swr_en : 1;            /*!< [1..1] 1: enable SWR regulator ; 0: disable SWR                           */
      __IOM uint32_t sys_swr_ldo_en : 1;        /*!< [2..2] 1: power on LDO                                                    */
      __IOM uint32_t sys_swr_diode_enb : 1;     /*!< [3..3] Enable diode soft start                                            */
      __IM  uint32_t            : 17;
      __IOM uint32_t sys_swr12_comp_type_l : 1; /*!< [21..21] Compensation L type: 1:type3 0:type2                             */
      __IOM uint32_t sys_swr12_comp_c1 : 2;     /*!< [23..22] 00 => 1.8p 01 => 3.6p 10 => 5.4p 11 => 7.2p                      */
      __IOM uint32_t sys_swr12_comp_c2 : 2;     /*!< [25..24] 00 => 35f 01 => 70f 10 => 70f 11 => 105f                         */
      __IOM uint32_t sys_swr12_comp_c3 : 2;     /*!< [27..26] 00 => 1.5p 01 => 3.0p 10 => 4.5p 11 => 6.0p                      */
      __IOM uint32_t sys_swr12_comp_r1 : 2;     /*!< [29..28] 00 => 600k 01 => 500k 10 => 700k 11 => 400k                      */
      __IOM uint32_t sys_swr12_comp_r2 : 2;     /*!< [31..30] 00 => 2.5M 01 => 2.0M 10 => 1.5M 11 => 1.0M                      */
    } sys_swr_ctrl0_b;
  } ;
  
  union {
    __IOM uint32_t sys_swr_ctrl1;               /*!< (@ 0x0000004C) System Switching Regulator Control Register1               */
    
    struct {
      __IOM uint32_t sys_swr12_comp_r3 : 2;     /*!< [1..0] 00 => 1.2k 01 => 1.0k 10 => 1.0k 11 => 0.8k                        */
      __IOM uint32_t sys_swr12_sawtooth_cfc_l : 2;/*!< [3..2] Control sawtooth current for PFM Cap(pf) Ton(ns) 00 2.00
                                                     200 01 3.00 300 10 5.00 500 11 6.00 600                                   */
      __IOM uint32_t sys_swr12_sawtooth_cf_l : 2;/*!< [5..4] Control sawtooth capacitor COT Offset<1:0>                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t sys_swr12_ocp_cur : 3;     /*!< [9..7] 000: Voltage 0.3; Current: 626mA 001: Voltage 0.4; Current:
                                                     8812mA 010: Voltage 0.5; Current: 998mA 011: Voltage 0.55;
                                                     Current: 1091mA 100: Voltage 0.6; Current: 1184mA 101:
                                                     Voltage 0.65; Current: 1276mA 110: Voltage 0.7; Current:
                                                     1396mA 111: Voltage 0.75; Current: 1462mA                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t sys_swr12_autozcd : 1;     /*!< [12..12] 0: zcd_code_in_L<4:0> 1:10000                                    */
      __IOM uint32_t sys_swr12_bypass_ssr : 1;  /*!< [13..13] 1: bypass SSR latch; 0: enable SSR latch                         */
      __IOM uint32_t sys_sw12_clamp_duty : 1;   /*!< [14..14] Clamp minimum duty                                               */
      __IOM uint32_t sys_sw12_nonovrlap_dly : 2;/*!< [16..15] Set nonoverlap delay                                             */
      __IOM uint32_t sys_sw12_tbox : 2;         /*!< [18..17] SWR DTEST_SWREG<0> 00 adv 01 n1_L 10 CKMOD 11 STOP_L
                                                     DTEST_SWREG<1> 00 ZCDon 01 VZCD 10 ckout 11 ocp                           */
      __IOM uint32_t sys_swr12_arenb : 1;       /*!< [19..19] 0:enable 1:disable                                               */
      __IOM uint32_t sys_sldo_cout_en : 1;      /*!< [20..20] Control small ldo voltage                                        */
      __IOM uint32_t sys_sw12_ocps_l : 1;       /*!< [21..21] when OCP enable PMOS or not 0:HG 1:PGATE                         */
      __IOM uint32_t sys_sw12_ldof_l : 1;       /*!< [22..22] SEL LDO mode feedback point 0:vo15 1:LX_SPS                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t sys_sw12_zcd_cap_sel : 2;  /*!< [26..25] 00 60fF 01 60f+102f 10 60f+204f 11 60f+102f+204f                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t en_max_duty : 1;           /*!< [29..29] Enable maximum duty                                              */
    } sys_swr_ctrl1_b;
  } ;
  __IM  uint32_t  RESERVED5[2];
  
  union {
    __IOM uint32_t sys_swr_ocp;                 /*!< (@ 0x00000058) System Switching Regulator Over Current Protection
                                                                    Control Register                                           */
    
    struct {
      __IOM uint32_t sys_swr_ocp_wnd : 16;      /*!< [15..0] Over-current protect circuit window setting                       */
      __IOM uint32_t sys_swr_ocp_thd : 15;      /*!< [30..16] Over-current protect circuit threshold setting                   */
      __IOM uint32_t sys_swr_ocp_dis : 1;       /*!< [31..31] 1:Disable Over-current protect circuit; 0 : Enable               */
    } sys_swr_ocp_b;
  } ;
  
  union {
    __IOM uint32_t sys_swr_zcd;                 /*!< (@ 0x0000005C) System Switching Regulator Zero Current Detection
                                                                    Control Register                                           */
    
    struct {
      __IOM uint32_t sys_swr_zcd_code : 5;      /*!< [4..0] sys_swr_zcd_code                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t sys_swr_zcd_mode : 1;      /*!< [6..6] sys_swr_zcd_mode                                                   */
      __IOM uint32_t sys_swr_zcd_auto : 1;      /*!< [7..7] sys_swr_zcd_auto                                                   */
    } sys_swr_zcd_b;
  } ;
  
  union {
    __IOM uint32_t sys_xtal_ctrl0;              /*!< (@ 0x00000060) System XTAL Control Register0                              */
    
    struct {
      __IOM uint32_t sys_xtal_bgmb_en : 1;      /*!< [0..0] 1: enable XTAL Bandgap and Mbias                                   */
      __IOM uint32_t sys_xtal_en : 1;           /*!< [1..1] 1: enable XTAL macro; 0: disable XTAL macro and no leakage
                                                     from XTAL block                                                           */
      __IM  uint32_t            : 6;
      __IOM uint32_t sys_xtal_gmp : 5;          /*!< [12..8] GMP: 0~31 + 1(fix)                                                */
      __IOM uint32_t sys_xtal_gmn : 5;          /*!< [17..13] GMP: 0~31 + 1(fix)                                               */
    } sys_xtal_ctrl0_b;
  } ;
  
  union {
    __IOM uint32_t sys_xtal_ctrl1;              /*!< (@ 0x00000064) System XTAL Control Register1                              */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t gated_xtal_ok0 : 1;        /*!< [1..1] 1:Gated xtal OK0                                                   */
      __IOM uint32_t sys_xtal_xqsel_afe : 1;    /*!< [2..2] 0: self-bias buffer, 1:replica INV(for AFE)                        */
      __IOM uint32_t sys_xtal_ldo : 2;          /*!< [4..3] XTAL 1.2V LDO adjust (before Xtal start) 11: 1.3V 10:1.2V
                                                     01:1.1V 00:1.0V                                                           */
      __IOM uint32_t sys_xtal_gm_sep : 1;       /*!< [5..5] 0: GMP=GMN                                                         */
      __IOM uint32_t sys_xtal_gate_rf1p : 1;    /*!< [6..6] RF1P Clock source gated control, 1:gated, 0: clock enable          */
      __IOM uint32_t sys_xtal_gate_rf1n : 1;    /*!< [7..7] RF1N Clock source gated control, 1:gated, 0: clock enable          */
      __IOM uint32_t sys_xtal_drv_rf1 : 2;      /*!< [9..8] Driving control of RF1 clock buffer, 11:large current,
                                                     00: small current                                                         */
      __IOM uint32_t sys_xtal_gate_wlafep : 1;  /*!< [10..10] AFEP Clock source gated control, 1:gated, 0: clock
                                                     enable                                                                    */
      __IOM uint32_t sys_xtal_gate_wlafen : 1;  /*!< [11..11] AFE Clock source gated control, 1:gated, 0: clock enable         */
      __IOM uint32_t sys_xtal_drv_wlafe : 2;    /*!< [13..12] Driving control of WL AFE clock buffer, 11:large current,
                                                     00: small current                                                         */
      __IOM uint32_t sys_xtal_gate_usbn : 1;    /*!< [14..14] USBN Clock source gated control, 1:gated, 0: clock
                                                     enable                                                                    */
      __IOM uint32_t sys_xtal_gate_usbp : 1;    /*!< [15..15] USBP Clock source gated control, 1:gated, 0: clock
                                                     enable                                                                    */
      __IOM uint32_t sys_xtal_drv_usb : 2;      /*!< [17..16] Driving control of USB clock buffer, 11:large current,
                                                     00: small current                                                         */
      __IOM uint32_t sys_xtal_gate_digip : 1;   /*!< [18..18] SYSPLL Clock source gated control, 1:gated, 0: clock
                                                     enable                                                                    */
      __IOM uint32_t sys_xtal_gate_digin : 1;   /*!< [19..19] SYSPLL Clock source gated control, 1:gated, 0: clock
                                                     enable                                                                    */
      __IOM uint32_t sys_xtal_drv_digi : 2;     /*!< [21..20] Driving control of DIG clock buffer, 11:large current,
                                                     00: small current                                                         */
      __IOM uint32_t sys_xtal_ldo_ok : 2;       /*!< [23..22] (after Xtal started) 11: 1.3V 10:1.2V 01:1.1V 00:1.0V            */
      __IOM uint32_t sys_xtal_drv_rf_latch : 1; /*!< [24..24] 1: latch enable                                                  */
      __IOM uint32_t sys_xtal_delay_wlafe : 1;  /*!< [25..25] 1: ck delay by 3 inverters, 0: ck delay by 17 inverters          */
      __IOM uint32_t sys_xtal_delay_digi : 1;   /*!< [26..26] 1: ck delay by 3 inverters, 0: ck delay by half cycle            */
      __IOM uint32_t sys_xtal_delay_usb : 1;    /*!< [27..27] 1: ck delay by 3 inverters, 0: ck delay by 17 inverters          */
      __IOM uint32_t sys_xtal_xqsel_rf_initial : 1;/*!< [28..28] 0: schmitt trigger, 1:replica INV(for OK0=0)                  */
      __IOM uint32_t sys_xtal_xqsel_rf_awake : 1;/*!< [29..29] 0: self-bias buffer, 1:replica INV(for OK0=1)                   */
      __IOM uint32_t sys_xtal_ldo_di : 1;       /*!< [30..30] 1: enable LDO diode connect                                      */
      __IOM uint32_t sys_xtal_sel_tok_b0 : 1;   /*!< [31..31] bit_sys_xtal_sel_tok[0]                                          */
    } sys_xtal_ctrl1_b;
  } ;
  
  union {
    __IOM uint32_t sys_xtal_ctrl2;              /*!< (@ 0x00000068) System XTAL Control Register2                              */
    
    struct {
      __IOM uint32_t sys_xtal_sel_tok_b2_1 : 2; /*!< [1..0] For cycles / 40MHz / 26MHz 000: 8 / 200n / 300n 001:
                                                     16 / 400n / 600n 010: 32 / 800n / 1.2u 011: 64 / 1.6u /
                                                     2.5u 100: 2^14 / 0.4m / 0.6m 101: 2^15 / 0.8m / 1.2m 110:
                                                     2^16 / 1.6m / 2.5m 111: 2^17 / 3.2m / 4.9m                                */
      __IOM uint32_t sys_xtal_lpmode : 1;       /*!< [2..2] 1: xtal low power mode enable                                      */
      __IOM uint32_t sys_xtal_en_aac_gm : 1;    /*!< [3..3] 1: enable xtal aac gm control                                      */
      __IOM uint32_t sys_xtal_en_aac_peakdet : 1;/*!< [4..4] 1: enable xtal aac peak detector                                  */
      __IOM uint32_t sys_xtal_aack_pk_manu : 1; /*!< [5..5] 1: manual for peak detector peak selection                         */
      __IOM uint32_t sys_xtal_manu_pk_sel : 2;  /*!< [7..6] XI Vpk-to-Vpk 00: 0.7V 01: 0.8V 10: 0.9V 11: 1V                    */
      __IOM uint32_t sys_xtal_pk_sel_offset : 1;/*!< [8..8] 1: XI Vpk-to-Vpk offset to 00: 0.4V 01: 0.5V 10: 0.6V
                                                     11: 0.7V                                                                  */
      __IOM uint32_t sys_xtal_dummy : 6;        /*!< [14..9] Dummy control bits ( for Testing buf) <5:0>: reserved
                                                     <0>: 1: enable 1/2 VBG voltage to VBGO for CP testing                     */
      __IM  uint32_t            : 9;
      __IOM uint32_t xaac_reset_n : 1;          /*!< [24..24] AAC digital circuit reset (low to high)                          */
      __IOM uint32_t xaac_offset_plus : 1;      /*!< [25..25] 0: aac calibrated gm result - offset, 1:aac calibrated
                                                     gm result + offset                                                        */
      __IOM uint32_t xaac_gm_offset : 5;        /*!< [30..26] aac calibrated gm result +/- offset                              */
      __IOM uint32_t xaac_gm_step : 1;          /*!< [31..31] aac gm searching step. 0:step 1, 1:step 2                        */
    } sys_xtal_ctrl2_b;
  } ;
  
  union {
    __IOM uint32_t sys_xtal_aac_ctrl;           /*!< (@ 0x0000006C) System XTAL AAC Control Register                           */
    
    struct {
      __IOM uint32_t xaac_gm_init : 5;          /*!< [4..0] aac gm initial setting                                             */
      __IM  uint32_t            : 3;
      __IOM uint32_t xaac_gm_stup : 5;          /*!< [12..8] aac gm start up setting (when pkdet=0,gm trans to the
                                                     maximum value)                                                            */
      __IOM uint32_t xaac_manual : 5;           /*!< [17..13] Gm manual at EN_XTAL_AAC_DIGI=0                                  */
      __IOM uint32_t en_xtal_aac_digi : 1;      /*!< [18..18] 1:enable aac digital circuit                                     */
      __IM  uint32_t            : 1;
      __OM  uint32_t xaac_en_trig : 1;          /*!< [20..20] Enable main control statemachine to trigger auto enable
                                                     of AAC digital circuit                                                    */
      __IOM uint32_t xaac_mode  : 2;            /*!< [22..21] 11: XTAL_AACK_PK_SEL=<11>'s XTAL_GM_OUT3 10: XTAL_AACK_PK_SEL=<10>'s
                                                     XTAL_GM_OUT2 01: XTAL_AACK_PK_SEL=<01>'s XTAL_GM_OUT1 00:
                                                     XTAL_AACK_PK_SEL=<00>'s XTAL_GM_OUT0                                      */
      __IOM uint32_t xaac_lpow  : 1;            /*!< [23..23] xaac_lpow                                                        */
      __IOM uint32_t xaac_lut_manual_en : 1;    /*!< [24..24] xaac_lut_manual_en                                               */
    } sys_xtal_aac_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t sys_pll_ctrl0;               /*!< (@ 0x00000070) System PLL Control Register0                               */
    
    struct {
      __IM  uint32_t            : 3;
      __IOM uint32_t pll_enc_div_sel : 3;       /*!< [5..3] output divider selection. Default=000 000=/1, 100=/4,
                                                     110=/8, 111=/16                                                           */
      __IOM uint32_t pll_enc_ps_en : 1;         /*!< [6..6] phase selector enable                                              */
      __IOM uint32_t pll_enc_div2_en : 1;       /*!< [7..7] output clk div 2 enable                                            */
      __IOM uint32_t pll_enc_clk_en : 1;        /*!< [8..8] output clk enable                                                  */
      __IOM uint32_t pll_enc_fref_edge_sel : 1; /*!< [9..9] 0:fref,1:frefb                                                     */
      __IM  uint32_t            : 12;
      __IOM uint32_t pll_enc_ps_sel : 3;        /*!< [24..22] pll_enc_ps_sel                                                   */
      __IOM uint32_t pll_enc_wdg_en : 1;        /*!< [25..25] 0: watch dog on ,1: watch dog off                                */
      __IM  uint32_t            : 3;
      __IOM uint32_t pll_enc_en : 1;            /*!< [29..29] (need pwl signal) 0->1                                           */
      __IOM uint32_t pll_enc_div_en : 1;        /*!< [30..30] input divider enable (need pwl signal) 0->1                      */
      __IOM uint32_t pll_enc_powcut_en : 1;     /*!< [31..31] erc enable.                                                      */
    } sys_pll_ctrl0_b;
  } ;
  
  union {
    __IOM uint32_t sys_pll_ctrl1;               /*!< (@ 0x00000074) System PLL Control Register1                               */
    
    struct {
      __IM  uint32_t            : 5;
      __IOM uint32_t pll_enc_divn_sdm : 6;      /*!< [10..5] pll_enc_divn_sdm                                                  */
      __IOM uint32_t pll_enc_bb_dbg_sel_afe_sdm : 4;/*!< [14..11] pll_enc_bb_dbg_sel_afe_sdm                                   */
      __IOM uint32_t pll_enc_trig_rreq_en : 1;  /*!< [15..15] freq. step up or step down enable                                */
      __IOM uint32_t pll_enc_step_freq_sel : 4; /*!< [19..16] step size selection for switching freq.                          */
      __IOM uint32_t pll_enc_tbase_freq_sel : 4;/*!< [23..20] for output clk step up or step down                              */
      __IOM uint32_t pll_enc_freq_sel : 4;      /*!< [27..24] output clk selection, Default=200MHz                             */
    } sys_pll_ctrl1_b;
  } ;
  
  union {
    __IOM uint32_t sys_pll_ctrl2;               /*!< (@ 0x00000078) System PLL Control Register2                               */
    
    struct {
      __IOM uint32_t pll_enc_ref_clk_sel : 1;   /*!< [0..0] 0-> select special route , 1-> digital APR                         */
      __IOM uint32_t pll_enc_sp_r_enb : 1;      /*!< [1..1] 0-> enable special route ,1-> disable special route                */
      __IM  uint32_t            : 4;
      __IOM uint32_t pll_enc_ssc_en : 1;        /*!< [6..6] ssc enable. Default=0                                              */
      __IOM uint32_t pll_enc_ssc_freq_sel : 12; /*!< [18..7] ssc freq selection                                                */
      __IOM uint32_t pll_enc_ssc_step_sel : 13; /*!< [31..19] ssc step size selection.                                         */
    } sys_pll_ctrl2_b;
  } ;
  
  union {
    __IOM uint32_t sys_pll_ctrl3;               /*!< (@ 0x0000007C) System PLL Control Register3                               */
    
    struct {
      __IM  uint32_t            : 15;
      __IOM uint32_t pll_enc_sdm_order_sel : 1; /*!< [15..15] SDM order: 0:2nd order, 1:3rd order                              */
      __IOM uint32_t pll_enc_sdm_fon : 3;       /*!< [18..16] N code, feedback divider number 1 for 1/8                        */
      __IOM uint32_t pll_enc_sdm_fof : 13;      /*!< [31..19] F code, feedback divider number 1for 1/8*1/2^13                  */
    } sys_pll_ctrl3_b;
  } ;
  
  union {
    __IOM uint32_t osc128k_ctrl;                /*!< (@ 0x00000080) Osc128K Control Register                                   */
    
    struct {
      __IOM uint32_t sys_128k_en : 1;           /*!< [0..0] POW_128KOSC                                                        */
      __IOM uint32_t sys_128k_ldo_vref_sel : 1; /*!< [1..1] SEL_LDO_VREF                                                       */
      __IM  uint32_t            : 6;
      __IOM uint32_t sys_128k_rcal : 6;         /*!< [13..8] F=128k+(RCAL[5:0]-32)*128k*3_                                     */
    } osc128k_ctrl_b;
  } ;
  __IM  uint32_t  RESERVED6;
  
  union {
    __IOM uint32_t sys_32k_sdm_idr_ctrl0;       /*!< (@ 0x00000088) 32K SDM Indirrect Access Control Register0                 */
    
    struct {
      __IOM uint32_t sdm_addr   : 6;            /*!< [5..0] SDM register offset                                                */
      __IM  uint32_t            : 2;
      __IOM uint32_t sdm_en     : 1;            /*!< [8..8] SDM function enable                                                */
      __IOM uint32_t sdm_clk_en : 1;            /*!< [9..9] SDM Pclk enable                                                    */
    } sys_32k_sdm_idr_ctrl0_b;
  } ;
  
  union {
    __IOM uint32_t sys_32k_sdm_idr_ctrl1;       /*!< (@ 0x0000008C) 32K SDM Indirrect Access Control Register1                 */
    
    struct {
      __IOM uint32_t ls_sdm_data : 32;          /*!< [31..0] SDM register data, support byte write                             */
    } sys_32k_sdm_idr_ctrl1_b;
  } ;
  __IM  uint32_t  RESERVED7[4];
  
  union {
    __IM  uint32_t xtal_aac_dbg;                /*!< (@ 0x000000A0) XTAL AAC Debugging Register                                */
    
    struct {
      __IM  uint32_t xtal_aac_rdy : 1;          /*!< [0..0] xtal_aac_rdy                                                       */
      __IM  uint32_t xtal_aac_dbg : 3;          /*!< [3..1] xtal_aac_dbg                                                       */
      __IM  uint32_t xtal_aac_state : 4;        /*!< [7..4] xtal_aac_state                                                     */
      __IM  uint32_t xtal_aac_done : 16;        /*!< [23..8] xtal_aac_done                                                     */
      __IM  uint32_t xtal_gm_out : 5;           /*!< [28..24] xtal_gm_out                                                      */
      __IM  uint32_t            : 2;
      __IM  uint32_t xtal_pkdet_out : 1;        /*!< [31..31] xtal_pkdet_out                                                   */
    } xtal_aac_dbg_b;
  } ;
  
  union {
    __IM  uint32_t sys_debug_reg;               /*!< (@ 0x000000A4) System Debugging Register                                  */
    
    struct {
      __IM  uint32_t sys_dbg_value : 32;        /*!< [31..0] SYS debug register value. 0x30[7:0] select the debug
                                                     port                                                                      */
    } sys_debug_reg_b;
  } ;
  __IM  uint32_t  RESERVED8;
  
  union {
    __IOM uint32_t pad_ctrl;                    /*!< (@ 0x000000AC) IO Pad Control Register                                    */
    
    struct {
      __IOM uint32_t gpiog_a_s_shdn : 1;        /*!< [0..0] GPIOA 3, 4, 6-12. PAD enable, 1: enable PAD, 0: shutdown           */
      __IOM uint32_t gpiog_a_f_shdn : 1;        /*!< [1..1] GPIOA 13, 16, 17, 18, 21, 22., PAD enable 1: enable PAD,
                                                     0: shutdown                                                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t gpioga_rstb33 : 1;         /*!< [4..4] 0: reset GPIO group A pull control                                 */
      __IOM uint32_t gpioga_h3l1_ctrl0 : 1;     /*!< [5..5] IO pad power voltage of GPIO A0-12 0:1.8V; 1:3.3V                  */
      __IOM uint32_t gpioga_h3l1_ctrl1 : 1;     /*!< [6..6] IO pad power voltage of GPIO A15-23 0:1.8V; 1:3.3V                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpiog_b_shdn : 1;          /*!< [8..8] PAD enable, 1: enable PAD, 0: shutdown                             */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpiogb_rstb33 : 1;         /*!< [12..12] 0: reset GPIO group B pull control                               */
      __IOM uint32_t gpiogb_h3l1 : 1;           /*!< [13..13] GPIO_B 3.3V IO pad input voltage level of High: 0:1.8V;
                                                     1:3.3V                                                                    */
      __IM  uint32_t            : 2;
      __IOM uint32_t vd5v_sel   : 1;            /*!< [16..16] select the Power source from REGU,1: 5V_LDO_IN, 0:
                                                     5V_LDO_OUT                                                                */
      __IOM uint32_t io5v_h5l3  : 1;            /*!< [17..17] 5V IO pad input voltage level of High: 0: 3.3V; 1:
                                                     5V                                                                        */
      __IM  uint32_t            : 6;
      __IOM uint32_t trap_shdn  : 1;            /*!< [24..24] A0,1,2,5,23 PAD enable, 1: enable PAD, 0: shutdown               */
    } pad_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpioa0_1_ctrl;               /*!< (@ 0x000000B0) GPIOA0 and GPIOA1 Control Register                         */
    
    struct {
      __IOM uint32_t gpioa0_pinmux_sel : 3;     /*!< [2..0] 000: Reserved 001: JTAG_CLK 010: UART1_IN 011: EXT_32K
                                                     100: SIC_SCL 101: PMM0 110: WL_UART_IN 111: GPIO                          */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa0_pull_ctrl_1_0 : 2;  /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa0_smt_en : 1;         /*!< [9..9] Enable GPIOA0 Schmitt trigger; 1: enable                           */
      __IOM uint32_t gpioa0_driving : 2;        /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpioa1_pinmux_sel : 3;     /*!< [18..16] 000: Reserved 001: JTAG_TMS 010: UART1_OUT 011: BT_led
                                                     100: SIC_DA 101: PWM1 110: WL_UART_OUT 111: GPIO                          */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa1_pull_ctrl_1_0 : 2;  /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa1_smt_en : 1;         /*!< [25..25] Enable GPIOA1 Schmitt trigger; 1: enable                         */
      __IOM uint32_t gpioa1_driving : 2;        /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpioa0_1_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpioa2_3_ctrl;               /*!< (@ 0x000000B4) GPIOA2 and GPIOA3 Control Register                         */
    
    struct {
      __IOM uint32_t gpioa2_pinmux_sel : 3;     /*!< [2..0] 000: 001: JTAG_TDO 010: UART1_IN 011: SPI_CS 100: I2C0_SCL
                                                     101: PWM2 110: 111: GPIO                                                  */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa2_pull_ctrl_1_0 : 2;  /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa2_smt_en : 1;         /*!< [9..9] Enable GPIOA2 Schmitt trigger; 1: enable                           */
      __IOM uint32_t gpioa2_driving : 2;        /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpioa3_pinmux_sel : 3;     /*!< [18..16] 000: Reserved 001: JTAG_TDI 010: UART1_OUT 011: SPI_SCL
                                                     100: I2C0_SDA 101: PWM3 110: reserved 111: GPIO                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa3_pull_ctrl : 2;      /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa3_smt_en : 1;         /*!< [25..25] Enable GPIOA3 Schmitt trigger; 1: enable                         */
      __IOM uint32_t gpioa3_driving : 2;        /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpioa2_3_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpioa4_5_ctrl;               /*!< (@ 0x000000B8) GPIO A4 and GPIO A5 Control Register                       */
    
    struct {
      __IOM uint32_t gpioa4_pinmux_sel : 3;     /*!< [2..0] 000: Reserved 001: JTAG_TRST 010: UART1_CTS 011: SPI_MOSI
                                                     100: Reserved 101: PWM4 110: Reserved 111: GPIO                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa4_pull_ctrl : 2;      /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa4_smt_en : 1;         /*!< [9..9] Enable GPIOA4 Schmitt trigger; 1: enable                           */
      __IOM uint32_t gpioa4_driving : 2;        /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpioa5_pinmux_sel : 3;     /*!< [18..16] 000: 001: 010: UART1_RTS 011: SPI_MISO 100: 101: PWM5
                                                     110: 111: GPIO                                                            */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa5_pull_ctrl_1_0 : 2;  /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa5_smt_en : 1;         /*!< [25..25] Enable GPIOA5 Schmitt trigger; 1: enable                         */
      __IOM uint32_t gpioa5_driving : 2;        /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpioa4_5_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpioa6_7_ctrl;               /*!< (@ 0x000000BC) GPIO A6 and GPIO A7 Control Register                       */
    
    struct {
      __IOM uint32_t gpioa6_pinmux_sel : 3;     /*!< [2..0] 000: reserved 001: reserved 010: reserved 011: reserved
                                                     100: reserved 101: PWM6 110: reserved 111: GPIO                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa6_pull_ctrl : 2;      /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa6_smt_en : 1;         /*!< [9..9] Enable GPIOA6 Schmitt trigger; 1: enable                           */
      __IOM uint32_t gpioa6_driving : 2;        /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpioa7_pinmux_sel : 3;     /*!< [18..16] 000: SPI_M_CS 001: Reserved 010: Reserved 011: SPI_CS
                                                     100: Reserved 101: Reserved 110: Reserved 111: GPIO                       */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa7_pull_ctrl : 2;      /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa7_smt_en : 1;         /*!< [25..25] Enable GPIOA7 Schmitt trigger; 1: enable                         */
      __IOM uint32_t gpioa7_driving : 2;        /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpioa6_7_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpioa8_9_ctrl;               /*!< (@ 0x000000C0) GPIO A8 and GPIO A9 Control Register                       */
    
    struct {
      __IOM uint32_t gpioa8_pinmux_sel : 3;     /*!< [2..0] 000: SPI_M_CLK 001: Reserved 010: Reserved 011: SPI_CLK
                                                     100: Reserved 101: Reserved 110: Reserved 111: GPIO                       */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa8_pull_ctrl : 2;      /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa8_smt_en : 1;         /*!< [9..9] Enable GPIOA8 Schmitt trigger; 1: enable                           */
      __IOM uint32_t gpioa8_driving : 2;        /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpioa9_pinmux_sel : 3;     /*!< [18..16] 000: SPI_M_D2 001: Reserved 010: UART0_RTS 011: SPI_MOSI
                                                     100: Reserved 101: Reserved 110: Reserved 111: GPIO                       */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa9_pull_ctrl : 2;      /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa9_smt_en : 1;         /*!< [25..25] Enable GPIOA9 Schmitt trigger; 1: enable                         */
      __IOM uint32_t gpioa9_driving : 2;        /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpioa8_9_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpioa10_11_ctrl;             /*!< (@ 0x000000C4) GPIO A10 and GPIO A11 Control Register                     */
    
    struct {
      __IOM uint32_t gpioa10_pinmux_sel : 3;    /*!< [2..0] 000: SPI_M_D1 001: Reserved 010: UART0_CTS 011: SPI_MISO
                                                     100: Reserved 101: Reserved 110: BT_I2C_SCL 111: GPIO                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa10_pull_ctrl : 2;     /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa10_smt_en : 1;        /*!< [9..9] Enable GPIOA10 Schmitt trigger; 1: enable                          */
      __IOM uint32_t gpioa10_driving : 2;       /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpioa11_pinmux_sel : 3;    /*!< [18..16] 000: SPI_M_D0 001: Reserved 010: UART0_OUT 011: Reserved
                                                     100: I2C0_SCL 101: PWM0 110: BT_I2C_SDA 111: GPIO                         */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa11_pull_ctrl : 2;     /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa11_smt_en : 1;        /*!< [25..25] Enable GPIOA11 Schmitt trigger; 1: enable                        */
      __IOM uint32_t gpioa11_driving : 2;       /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpioa10_11_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpioa12_13_ctrl;             /*!< (@ 0x000000C8) GPIO A12 and GPIO A13 Control Register                     */
    
    struct {
      __IOM uint32_t gpioa12_pinmux_sel : 3;    /*!< [2..0] 000: SPI_M_D3 001: Reserved 010: UART0_IN 011: Reserved
                                                     100: I2C0_SDA 101: PWM1 110: Reserved 111: GPIO                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa12_pull_ctrl : 2;     /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa12_smt_en : 1;        /*!< [9..9] Enable GPIOA12 Schmitt trigger; 1: enable                          */
      __IOM uint32_t gpioa12_driving : 2;       /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpioa13_pinmux_sel : 3;    /*!< [18..16] 000: Reserved 001: Reserved 010: UART0_IN 011: Reserved
                                                     100: Reserved 101: PWM7 110: Reserved 111: GPIO                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa13_pull_ctrl : 2;     /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa13_smt_en : 1;        /*!< [25..25] Enable GPIOA13 Schmitt trigger; 1: enable                        */
      __IOM uint32_t gpioa13_driving : 2;       /*!< [27..26] (E2)= 3.3V: 0: 4mA; 1: 8mA; 5V: 0: 4mA; 1: 8mA;                  */
    } gpioa12_13_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpioa14_15_ctrl;             /*!< (@ 0x000000CC) GPIO A14 and GPIO A15 Control Register                     */
    
    struct {
      __IOM uint32_t gpioa14_pinmux_sel : 3;    /*!< [2..0] 000 : SDIO_INT 001: Reserved 010: UART0_OUT 011: Reserved
                                                     100: Reserved 101: PWM2 110: BT_LOG 111: GPIO                             */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa14_pull_ctrl_1_0 : 2; /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IOM uint32_t gpioa14_shdn_n : 1;        /*!< [8..8] PAD enable, 1: enable PAD, 0: shutdown                             */
      __IOM uint32_t gpioa14_smt_en : 1;        /*!< [9..9] Enable GPIOA14 Schmitt trigger; 1: enable                          */
      __IOM uint32_t gpioa14_driving : 2;       /*!< [11..10] (E2)= 3.3V: 0: 4mA; 1: 8mA; 5V: 0: 4mA; 1: 8mA;                  */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpioa15_pinmux_sel : 3;    /*!< [18..16] 000: SD_D2 001: SPI_M_CS 010: UART2_IN 011: SPI_CS
                                                     100: I2C0_SCL 101: PWM3 110: BT_UART_IN 111: GPIO                         */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa15_pull_ctrl_1_0 : 2; /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IOM uint32_t gpioa15_shdn_n : 1;        /*!< [24..24] PAD enable, 1: enable PAD, 0: shutdown                           */
      __IOM uint32_t gpioa15_smt_en : 1;        /*!< [25..25] Enable GPIOA15 Schmitt trigger; 1: enable                        */
      __IOM uint32_t gpioa15_driving : 2;       /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpioa14_15_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpioa16_17_ctrl;             /*!< (@ 0x000000D0) GPIO A16 and GPIO A17 Control Register                     */
    
    struct {
      __IOM uint32_t gpioa16_pinmux_sel : 3;    /*!< [2..0] 000: SD_D3 001: SPI_M_CLK 010: UART2_OUT 011: SPI_SCL
                                                     100: I2C0_SDA 101: PWM4 110: BT_UART_OUT 111: GPIO                        */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa16_pull_ctrl : 2;     /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa16_smt_en : 1;        /*!< [9..9] Enable GPIOA16 Schmitt trigger; 1: enable                          */
      __IOM uint32_t gpioa16_driving : 2;       /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpioa17_pinmux_sel : 3;    /*!< [18..16] 000: SD_CMD 001: SPI_M_D0 010: Reserved 011: Reserved
                                                     100: Reserved 101: PWM5 110: Reserved 111: GPIO                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa17_pull_ctrl : 2;     /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa17_smt_en : 1;        /*!< [25..25] Enable GPIOA17 Schmitt trigger; 1: enable                        */
      __IOM uint32_t gpioa17_driving : 2;       /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpioa16_17_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpioa18_19_ctrl;             /*!< (@ 0x000000D4) GPIO A18 and GPIO A19 Control Register                     */
    
    struct {
      __IOM uint32_t gpioa18_pinmux_sel : 3;    /*!< [2..0] 000: SD_CLK 001: SPI_M_D1 010: Reserved 011: Reserved
                                                     100: Reserved 101: PWM6 110: Reserved 111: GPIO                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa18_pull_ctrl : 2;     /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa18_smt_en : 1;        /*!< [9..9] Enable GPIOA18 Schmitt trigger; 1: enable                          */
      __IOM uint32_t gpioa18_driving : 2;       /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpioa19_pinmux_sel : 3;    /*!< [18..16] 000: SD_D0 001: SPI_M_D2 010: UART2_CTS 011: SPI_MOSI
                                                     100: I2C0_SCL 101: PWM7 110: 111: GPIO                                    */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa19_pull_ctrl_1_0 : 2; /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IOM uint32_t gpioa19_shdn_n : 1;        /*!< [24..24] PAD enable, 1: enable PAD, 0: shutdown                           */
      __IOM uint32_t gpioa19_smt_en : 1;        /*!< [25..25] Enable GPIOA19 Schmitt trigger; 1: enable                        */
      __IOM uint32_t gpioa19_driving : 2;       /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpioa18_19_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpioa20_21_ctrl;             /*!< (@ 0x000000D8) GPIO A20 and GPIO A21 Control Register                     */
    
    struct {
      __IOM uint32_t gpioa20_pinmux_sel : 3;    /*!< [2..0] 000: SD_D1 001:SPI_M_D3 010: UART2_RTS 011: SPI_MISO
                                                     100: I2C0_SDA 101: PWM0 110: reserv 111: GPIO                             */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa20_pull_ctrl_1_0 : 2; /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IOM uint32_t gpioa20_shdn_n : 1;        /*!< [8..8] PAD enable, 1: enable PAD, 0: shutdown                             */
      __IOM uint32_t gpioa20_smt_en : 1;        /*!< [9..9] Enable GPIOA20 Schmitt trigger; 1: enable                          */
      __IOM uint32_t gpioa20_driving : 2;       /*!< [11..10] 1: 16mA 0: 8mA                                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpioa21_pinmux_sel : 3;    /*!< [18..16] 000: Reserved 001: Reserved 010: UART2_IN 011: Reserved
                                                     100: I2C0_SCL 101: PWM1 110: RFE_CTRL0 111: GPIO                          */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa21_pull_ctrl : 2;     /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa21_smt_en : 1;        /*!< [25..25] Enable GPIOA21 Schmitt trigger; 1: enable                        */
      __IOM uint32_t gpioa21_driving : 2;       /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpioa20_21_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpioa22_23_ctrl;             /*!< (@ 0x000000DC) GPIO A22 and GPIO A23 Control Register                     */
    
    struct {
      __IOM uint32_t gpioa22_pinmux_sel : 3;    /*!< [2..0] 000: Reserved 001: Reserved 010: UART2_OUT 011: LED0
                                                     100: I2C0_SDA 101: PWM2 110: RFE_CTRL1 111: GPIO                          */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa22_pull_ctrl : 2;     /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa22_smt_en : 1;        /*!< [9..9] Enable GPIOA22 Schmitt trigger; 1: enable                          */
      __IOM uint32_t gpioa22_driving : 2;       /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpioa23_pinmux_sel : 3;    /*!< [18..16] 000: Reserved 001: Reserved 010: Reserved 011: LED0
                                                     100: Reserved 101: PWM7 110: RFE_CTRL2 111: GPIO                          */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpioa23_pull_ctrl_1_0 : 2; /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpioa23_smt_en : 1;        /*!< [25..25] Enable GPIOA23 Schmitt trigger; 1: enable                        */
      __IOM uint32_t gpioa23_driving : 2;       /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpioa22_23_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t sys_eeprom_ctrl0;            /*!< (@ 0x000000E0) System EEPROM Control Register                             */
    
    struct {
      __IM  uint32_t            : 5;
      __IOM uint32_t sys_autoload_sus : 1;      /*!< [5..5] 1: Autoload successful 0: Autoload fail                            */
      __IM  uint32_t            : 10;
      __IOM uint32_t sys_efuse_ldall : 1;       /*!< [16..16] 1: SW enable HWSM to autoload excluding Efuse 0x00~
                                                     0x31                                                                      */
      __IM  uint32_t            : 7;
      __IOM uint32_t efuse_pgpwd : 8;           /*!< [31..24] Efuse Program password, write 0x69 for programing                */
    } sys_eeprom_ctrl0_b;
  } ;
  __IM  uint32_t  RESERVED9;
  
  union {
    __IOM uint32_t sys_efuse_ctrl;              /*!< (@ 0x000000E8) System eFuse Control Register                              */
    
    struct {
      __IOM uint32_t sys_ef_data : 8;           /*!< [7..0] Access Data                                                        */
      __IOM uint32_t sys_ef_addr : 10;          /*!< [17..8] Access Address                                                    */
      __IOM uint32_t sys_ef_alden : 1;          /*!< [18..18] Autoload Enable                                                  */
      __IOM uint32_t sys_ef_pdwn : 1;           /*!< [19..19] Efuse power down                                                 */
      __IOM uint32_t sys_ef_tpg2avdd : 2;       /*!< [21..20] Tsp_pg_avdd 00:1000ns, 01:1250ns, 10:1500ns 11:1750ns.
                                                     (CLK freq: 4M)                                                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t sys_ef_tstrobe : 3;        /*!< [26..24] Tstrobe (AEN width) 000: 7000ns, 001:8000ns, 010: 9000ns,
                                                     011: 10000ns,100:11000ns, 101:12000ns, 110: 13000ns, 111:14000ns.
                                                     (CLK freq: 4Mhz)                                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t sys_ef_tgap : 2;           /*!< [29..28] 00: 2000ns, 01:2250ns, 10:2500ns, 11:2750ns. (CLK freq:
                                                     4Mhz)                                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t sys_ef_rwflag : 1;         /*!< [31..31] Write 1 for Program; Write 0 for Read Access                     */
    } sys_efuse_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t sys_efuse_test;              /*!< (@ 0x000000EC) eFuse Test Register                                        */
    
    struct {
      __IOM uint32_t sys_ef_scan_tthd : 7;      /*!< [6..0] Bit number for all cells scan test                                 */
      __IOM uint32_t sys_ef_trpt : 1;           /*!< [7..7] Test Scan Report: 1 : Fail, 0 : OK                                 */
      __IM  uint32_t            : 3;
      __IOM uint32_t sys_ef_force_pgmen : 1;    /*!< [11..11] SW force PGMEN input of efuse to high. (for the bank
                                                     selected by 0x34[9:8])                                                    */
      __IOM uint32_t sys_ef_scan_end : 4;       /*!< [15..12] Residual bytes Setting for SCAN (0~15)                           */
      __IOM uint32_t sys_ef_scan_start : 9;     /*!< [24..16] SCAN start Address (unit in byte)                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t sys_ef_cres_sel : 1;       /*!< [26..26] Efuse CRES selection, 0: 10k ; 1: 1.5k                           */
    } sys_efuse_test_b;
  } ;
  
  union {
    __IOM uint32_t sys_sw_reserv0;              /*!< (@ 0x000000F0) SW reserved Register0                                      */
    
    struct {
      __IOM uint32_t sw_resv0   : 32;           /*!< [31..0] SW reserved register0                                             */
    } sys_sw_reserv0_b;
  } ;
  
  union {
    __IOM uint32_t sys_sw_reserv1;              /*!< (@ 0x000000F4) SW reserved Register1                                      */
    
    struct {
      __IOM uint32_t sw_resv1   : 32;           /*!< [31..0] SW reserved register1                                             */
    } sys_sw_reserv1_b;
  } ;
  
  union {
    __IOM uint32_t sys_sw_reserv2;              /*!< (@ 0x000000F8) SW reserved Register2                                      */
    
    struct {
      __IOM uint32_t sw_resv2   : 32;           /*!< [31..0] SW reserved register2                                             */
    } sys_sw_reserv2_b;
  } ;
  
  union {
    __IOM uint32_t sys_sw_reserv3;              /*!< (@ 0x000000FC) SW reserved Register3                                      */
    
    struct {
      __IOM uint32_t sw_resv3   : 32;           /*!< [31..0] SW reserved register3                                             */
    } sys_sw_reserv3_b;
  } ;
  
  union {
    __IOM uint32_t sys_slp_wake_event_msk0;     /*!< (@ 0x00000100) System Wake Up Event Mask Register                         */
    
    struct {
      __IOM uint32_t syson_wevt_lpgtim_msk : 1; /*!< [0..0] 1: enable LP Timer Wakeup SYSON event; 0: disable the
                                                     event to wakeup system                                                    */
      __IOM uint32_t syson_wevt_hsgtim_msk : 1; /*!< [1..1] 1: enable HSGtimer Wakeup SYSON event; 0: disable the
                                                     event to wakeup system                                                    */
      __IOM uint32_t syson_wevt_over_current_msk : 1;/*!< [2..2] 1: enable OCP wakeup event; 0: disable the event to wakeup
                                                     system                                                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t syson_wevt_gpio_int_msk : 1;/*!< [4..4] 1: enable GPIO interrupt Wakeup event; 0: disable the
                                                     event to wakeup system                                                    */
      __IOM uint32_t syson_wevt_pwm_msk : 1;    /*!< [5..5] 1: enable PWM Wakeup event; 0: disable the event to wakeup
                                                     system                                                                    */
      __IOM uint32_t syson_wevt_i2c0_addr_macth_msk : 1;/*!< [6..6] 1:enable wakeup event of I2C0 RX address match             */
      __IM  uint32_t            : 1;
      __IOM uint32_t syson_wevt_wlan_msk : 1;   /*!< [8..8] 1: enable WLAN Wakeup event; 0: disable the event to
                                                     wakeup system                                                             */
      __IOM uint32_t syson_wevt_i2c0_msk : 1;   /*!< [9..9] 1: enable I2C0 Wakeup event; 0: disable the event to
                                                     wakeup system                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t syson_wevt_uart_msk : 1;   /*!< [11..11] 1: enable UART Wakeup event; 0: disable the event to
                                                     wakeup system All UART0 ~ UART3 (including BT UART) wake
                                                     events are combined to 1 event for PMU.                                   */
      __IM  uint32_t            : 2;
      __IOM uint32_t syson_wevt_sdio_msk : 1;   /*!< [14..14] 1: enable SDIO Wakeup event; 0: disable the event to
                                                     wakeup system                                                             */
      __IM  uint32_t            : 15;
      __IOM uint32_t syson_wevt_bor2_msk : 1;   /*!< [30..30] 1: enable brown out reset Wakeup event; 0: disable
                                                     the event to wakeup system                                                */
    } sys_slp_wake_event_msk0_b;
  } ;
  __IM  uint32_t  RESERVED10;
  
  union {
    __IOM uint32_t sys_slp_wake_event_status0;  /*!< (@ 0x00000108) System Wake Up Event Status Register                       */
    
    struct {
      __IOM uint32_t syson_wevt_lpgtim_sts : 1; /*!< [0..0] 1: Indicate SYSON LPTimer Wakeup SYSON event status;
                                                     Write 1 to clear.                                                         */
      __IM  uint32_t syson_wevt_hsgtim_sts : 1; /*!< [1..1] 1: Indicate HSGtimer Wakeup SYSON event;                           */
      __IOM uint32_t syson_wevt_over_current_sts : 1;/*!< [2..2] 1: Indicate OCP event status, write 1 to clear.               */
      __IM  uint32_t            : 1;
      __IM  uint32_t syson_wevt_gpio_int_sts : 1;/*!< [4..4] 1: Indicate GPIO interrupt Wakeup event;                          */
      __IM  uint32_t syson_wevt_pwm_sts : 1;    /*!< [5..5] 1: indicate PWM Wakeup event                                       */
      __IM  uint32_t syson_wevt_i2c0_addr_macth_sts : 1;/*!< [6..6] 1:inidcate wakeup event of I2C0 RX address match           */
      __IM  uint32_t            : 1;
      __IM  uint32_t syson_wevt_wlan_sts : 1;   /*!< [8..8] 1: enable WLAN Wakeup event; 0: disable the event to
                                                     wakeup system                                                             */
      __IM  uint32_t syson_wevt_i2c0_sts : 1;   /*!< [9..9] 1: indicate I2C0 Wakeup event                                      */
      __IM  uint32_t            : 1;
      __IM  uint32_t syson_wevt_uart_sts : 1;   /*!< [11..11] 1: indicate UART Wakeup event All UART0 ~ UART3 (including
                                                     BT UART) wake events are combined to 1 event for PMU.                     */
      __IM  uint32_t            : 2;
      __IM  uint32_t syson_wevt_sdio_sts : 1;   /*!< [14..14] 1: indicate SDIO Wakeup event                                    */
      __IM  uint32_t            : 15;
      __IOM uint32_t syson_wevt_bor2_sts : 1;   /*!< [30..30] Brown out reset status, write 1 to clear.                        */
    } sys_slp_wake_event_status0_b;
  } ;
  __IM  uint32_t  RESERVED11[2];
  
  union {
    __IOM uint32_t sys_snf_wake_event_status;   /*!< (@ 0x00000114) System Sniff Mode Wake Up Event Status Register            */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t syson_snfevt_wlon_pon_sts : 1;/*!< [1..1] 1: indicate wlan power on wakeup status                         */
    } sys_snf_wake_event_status_b;
  } ;
  
  union {
    __IOM uint32_t sys_pwrmgt_ctrl;             /*!< (@ 0x00000118) System Power Management Register                           */
    
    struct {
      __IOM uint32_t syson_pm_cmd_dslp : 1;     /*!< [0..0] 1: command SYSON SM to enter deep sleep state,when PMC
                                                     finishes the process, this bit will be auto clear to 0                    */
      __IOM uint32_t syson_pm_cmd_slp : 1;      /*!< [1..1] 1: command SYSON SM to enter sleep state, when PMC finishes
                                                     the process, this bit will be auto clear to 0                             */
    } sys_pwrmgt_ctrl_b;
  } ;
  __IM  uint32_t  RESERVED12;
  
  union {
    __IOM uint32_t sys_pwrmgt_option;           /*!< (@ 0x00000120) System Power Management Option Register                    */
    
    struct {
      __IM  uint32_t            : 9;
      __IOM uint32_t syson_pmopt_slp_en_swr : 1;/*!< [9..9] 1: power enable SWR/LDO 1.2V when enter into sleep mode;
                                                     0: disable SWR/LDO                                                        */
      __IOM uint32_t syson_pmopt_slp_en_pwm : 1;/*!< [10..10] 1: power enable SWR/LDO output heavy loading current
                                                     mode when enter into sleep mode; 0: disable SWR/LDO output
                                                     heavy loading mode                                                        */
      __IOM uint32_t syson_pmopt_slp_en_soc : 1;/*!< [11..11] 1: power enable SOC platform when enter into sleep
                                                     mode; 0: power off SoC domain                                             */
      __IOM uint32_t syson_pmopt_slp_xtal_en : 1;/*!< [12..12] 1: enable XTAL when enter into sleep mode; 0: disable
                                                     XTAL                                                                      */
      __IOM uint32_t syson_pmopt_slp_syspll_en : 1;/*!< [13..13] 1: enable syspem PLL when enter into sleep mode; 0:
                                                     disable SYSPLL                                                            */
      __IOM uint32_t syson_pmopt_slp_mem_pm_en : 1;/*!< [14..14] 0: Enable memory DS mode when enter into power mode
                                                     ; 1: memory normal mode when enter into power mode                        */
      __IOM uint32_t syson_pmopt_slp_5vldo_mediumld_en : 1;/*!< [15..15] 0: enable 5VLDO medium load when enter into sleep mode,
                                                     0x44[11:10] = 2b'01; 1: do not change                                     */
      __IOM uint32_t syson_pmopt_slp_5vldo_lightld_en : 1;/*!< [16..16] 0: enable 5VLDO light load when enter into sleep mode,
                                                     0x44[11:10] = 2b'11; 1: do not change                                     */
      __IOM uint32_t syson_pmopt_snz_en_swr : 1;/*!< [17..17] 1: power enable SWR/LDO 1.2V when enter into snooze
                                                     mode; 0: disable SWR/LDO                                                  */
      __IOM uint32_t syson_pmopt_snz_en_pwm : 1;/*!< [18..18] 1: power enable SWR/LDO output heavy loading current
                                                     mode when enter into snooze mode; 0: disable SWR/LDO output
                                                     heavy loading mode                                                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t syson_pmopt_snz_xtal_en : 1;/*!< [20..20] 1: enable XTAL when enter into snooze mode; 0: disable
                                                     XTAL                                                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t syson_pmopt_snz_5vldo_normal_en : 1;/*!< [23..23] 0: enable 5VLDO medium load when enter into snooze
                                                     mode, 0x44[11:10] = 2b'00; 1: do not change                               */
      __IOM uint32_t syson_pmopt_snz_5vldo_mediumld_en : 1;/*!< [24..24] 0: enable 5VLDO medium load when enter into snooze
                                                     mode, 0x44[11:10] = 2b'01 ; 1: do not change                              */
    } sys_pwrmgt_option_b;
  } ;
  
  union {
    __IOM uint32_t sys_pwrmgt_option_ext;       /*!< (@ 0x00000124) System Power Management Extension Option Register          */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t syson_pmopt_slp_anack_en : 1;/*!< [1..1] 1: enable syson register clock when enter into sleep
                                                     mode; 0: disable syson register clock                                     */
      __IOM uint32_t syson_pmopt_slp_anack_sel : 1;/*!< [2..2] 1: set ANA clock to 4MHz when enter into power mode;
                                                     0: set ANA clock to 250KHz when enter into power mode;                    */
    } sys_pwrmgt_option_ext_b;
  } ;
  __IM  uint32_t  RESERVED13[4];
  
  union {
    __IOM uint32_t non_reset_ff;                /*!< (@ 0x00000138) non-Reset Flags                                            */
    
    struct {
      __IOM uint32_t cpu_reset_flag : 1;        /*!< [0..0] IF cup reset happened, this flag will set to 1 by HW               */
      __IOM uint32_t bor2_flag  : 1;            /*!< [1..1] If BOR2(voltage detection?)happened, this flag will set
                                                     to 1 by HW                                                                */
      __IOM uint32_t rtc_restore : 1;           /*!< [2..2] SW used 1. RTC year have backup before reboot                      */
      __IOM uint32_t uartburn_boot : 1;         /*!< [3..3] ROM code used 1. enable UART download before reboot;
                                                     0: disable                                                                */
      __IOM uint32_t uartburn_debug : 1;        /*!< [4..4] ROM code used 1. enable UART download debug; 0: disable            */
      __IM  uint32_t            : 2;
      __IOM uint32_t sys_bor2_en : 1;           /*!< [7..7] 1: enable bor2 detection; 0: disable                               */
    } non_reset_ff_b;
  } ;
  __IM  uint32_t  RESERVED14[5];
  
  union {
    __IOM uint32_t gpiob0_1_ctrl;               /*!< (@ 0x00000150) GPIO B0 and GPIO B1 Control Register                       */
    
    struct {
      __IOM uint32_t gpiob0_pinmux_sel : 3;     /*!< [2..0] 000: Reserved 001: Reserved 010: Reserved 011: Reserved
                                                     100: Reserved 101: Reserved 110: Reserved 111: LPC_RSTB                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpiob0_pull_ctrl : 2;      /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpiob0_smt_en : 1;         /*!< [9..9] Enable GPIOB0 Schmitt trigger; 1: enable                           */
      __IOM uint32_t gpiob0_driving : 2;        /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpiob1_pinmux_sel : 3;     /*!< [18..16] 000: Reserved 001: Reserved 010: Reserved 011: Reserved
                                                     100: Reserved 101: Reserved 110: Reserved 111: LPC_D0                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpiob1_pull_ctrl : 2;      /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpiob1_smt_en : 1;         /*!< [25..25] Enable GPIOB1 Schmitt trigger; 1: enable                         */
      __IOM uint32_t gpiob1_driving : 2;        /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpiob0_1_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpiob2_3_ctrl;               /*!< (@ 0x00000154) GPIO B2 and GPIO B3 Control Register                       */
    
    struct {
      __IOM uint32_t gpiob2_pinmux_sel : 3;     /*!< [2..0] 000: Reserved 001: Reserved 010: Reserved 011: Reserved
                                                     100: Reserved 101: Reserved 110: Reserved 111: LPC_D1                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpiob2_pull_ctrl : 2;      /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpiob2_smt_en : 1;         /*!< [9..9] Enable GPIOB2 Schmitt trigger; 1: enable                           */
      __IOM uint32_t gpiob2_driving : 2;        /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpiob3_pinmux_sel : 3;     /*!< [18..16] 000: Reserved 001: Reserved 010: Reserved 011: Reserved
                                                     100: Reserved 101: Reserved 110: Reserved 111: LPC_D2                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpiob3_pull_ctrl : 2;      /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpiob3_smt_en : 1;         /*!< [25..25] Enable GPIOB3 Schmitt trigger; 1: enable                         */
      __IOM uint32_t gpiob3_driving : 2;        /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpiob2_3_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpiob4_5_ctrl;               /*!< (@ 0x00000158) GPIO B4 and GPIO B5 Control Register                       */
    
    struct {
      __IOM uint32_t gpiob4_pinmux_sel : 3;     /*!< [2..0] 000: Reserved 001: Reserved 010: Reserved 011: Reserved
                                                     100: Reserved 101: Reserved 110: Reserved 111: LPC_D3                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpiob4_pull_ctrl : 2;      /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpiob4_smt_en : 1;         /*!< [9..9] Enable GPIOB4 Schmitt trigger; 1: enable                           */
      __IOM uint32_t gpiob4_driving : 2;        /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpiob5_pinmux_sel : 3;     /*!< [18..16] 000: Reserved 001: Reserved 010: Reserved 011: Reserved
                                                     100: Reserved 101: Reserved 110: Reserved 111: LPC_CS                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpiob5_pull_ctrl : 2;      /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpiob5_smt_en : 1;         /*!< [25..25] Enable GPIOB5 Schmitt trigger; 1: enable                         */
      __IOM uint32_t gpiob5_driving : 2;        /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpiob4_5_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpiob6_7_ctrl;               /*!< (@ 0x0000015C) GPIO B6 and GPIO B7 Control Register                       */
    
    struct {
      __IOM uint32_t gpiob6_pinmux_sel : 3;     /*!< [2..0] 000: SPI_M_D2 001: Reserved 010: Reserved 011: Reserved
                                                     100: Reserved 101: Reserved 110: Reserved 111: LPC_CK                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpiob6_pull_ctrl : 2;      /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpiob6_smt_en : 1;         /*!< [9..9] Enable GPIOB6 Schmitt trigger; 1: enable                           */
      __IOM uint32_t gpiob6_driving : 2;        /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpiob7_pinmux_sel : 3;     /*!< [18..16] 000: SPI_M_D1 001: Reserved 010: Reserved 011: Reserved
                                                     100: Reserved 101: Reserved 110: Reserved 111: LPC_CK                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpiob7_pull_ctrl : 2;      /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpiob7_smt_en : 1;         /*!< [25..25] Enable GPIOB7 Schmitt trigger; 1: enable                         */
      __IOM uint32_t gpiob7_driving : 2;        /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpiob6_7_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpiob8_9_ctrl;               /*!< (@ 0x00000160) GPIO B8 and GPIO B9 Control Register                       */
    
    struct {
      __IOM uint32_t gpiob8_pinmux_sel : 3;     /*!< [2..0] 000: SPI_M_CS 001: Reserved 010: Reserved 011: Reserved
                                                     100: Reserved 101: Reserved 110: Reserved 111: LPC_D4                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpiob8_pull_ctrl : 2;      /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpiob8_smt_en : 1;         /*!< [9..9] Enable GPIOB8 Schmitt trigger; 1: enable                           */
      __IOM uint32_t gpiob8_driving : 2;        /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpiob9_pinmux_sel : 3;     /*!< [18..16] 000: Reserved 001: Reserved 010: Reserved 011: Reserved
                                                     100: Reserved 101: Reserved 110: Reserved 111: LPC_D5                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpiob9_pull_ctrl : 2;      /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpiob9_smt_en : 1;         /*!< [25..25] Enable GPIOB9 Schmitt trigger; 1: enable                         */
      __IOM uint32_t gpiob9_driving : 2;        /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpiob8_9_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpiob10_11_ctrl;             /*!< (@ 0x00000164) GPIO B10 and GPIO B11 Control Register                     */
    
    struct {
      __IOM uint32_t gpiob10_pinmux_sel : 3;    /*!< [2..0] 000: SPI_M_D3 001: Reserved 010: Reserved 011: Reserved
                                                     100: Reserved 101: Reserved 110: Reserved 111: LPC_D6                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpiob10_pull_ctrl : 2;     /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpiob10_smt_en : 1;        /*!< [9..9] Enable GPIOB10 Schmitt trigger; 1: enable                          */
      __IOM uint32_t gpiob10_driving : 2;       /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t gpiob11_pinmux_sel : 3;    /*!< [18..16] 000: SPI_M_CLK 001: Reserved 010: Reserved 011: Reserved
                                                     100: Reserved 101: Reserved 110: Reserved 111: LPC_D7                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpiob11_pull_ctrl : 2;     /*!< [23..22] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull
                                                     high; 2b'11: reserved                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpiob11_smt_en : 1;        /*!< [25..25] Enable GPIOB11 Schmitt trigger; 1: enable                        */
      __IOM uint32_t gpiob11_driving : 2;       /*!< [27..26] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpiob10_11_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t gpiob12_ctrl;                /*!< (@ 0x00000168) GPIO B10 and GPIO B11 Control Register                     */
    
    struct {
      __IOM uint32_t gpiob12_pinmux_sel : 3;    /*!< [2..0] 000: SPI_M_D0 001: Reserved 010: Reserved 011: Reserved
                                                     100: Reserved 101: Reserved 110: Reserved 111: LPC_RWDS                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t gpiob12_pull_ctrl : 2;     /*!< [7..6] 2b'00: high impedence; 2b'01: pull low; 2b'10: pull high;
                                                     2b'11: reserved                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t gpiob12_smt_en : 1;        /*!< [9..9] Enable GPIOB12 Schmitt trigger; 1: enable                          */
      __IOM uint32_t gpiob12_driving : 2;       /*!< [11..10] (E3,E2)=(10:9) 1.8V: 00: 2mA; 01: 4mA; 10: 6mA; 11:
                                                     8mA 3.3V: 00: 4mA; 01: 6mA; 10: 12mA; 11: 16mA                            */
    } gpiob12_ctrl_b;
  } ;
  __IM  uint32_t  RESERVED15[31];
  
  union {
    __IOM uint32_t test_ctrl;                   /*!< (@ 0x000001E8) Test Control Register                                      */
    
    struct {
      __IOM uint32_t pll_bypass_en : 1;         /*!< [0..0] 1: enable PLL_BYPASS in test mode                                  */
      __IOM uint32_t scan_compression_en : 1;   /*!< [1..1] 1: enable scan compression                                         */
    } test_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t test_mux_ctrl;               /*!< (@ 0x000001EC) Test Mux Control Register                                  */
    
    struct {
      __IOM uint32_t scan_mod0_en : 1;          /*!< [0..0] 1: enable CP scan test mux                                         */
      __IOM uint32_t scan_mod1_en : 1;          /*!< [1..1] 1: enable FT1 scan test mux                                        */
      __IOM uint32_t scan_mod2_en : 1;          /*!< [2..2] 1: enable FT2 scan test mux                                        */
      __IM  uint32_t            : 5;
      __IOM uint32_t mbist_en   : 1;            /*!< [8..8] 1: enable MBIST test mux                                           */
      __IM  uint32_t            : 7;
      __IOM uint32_t regu_test_mux_en : 1;      /*!< [16..16] 1: enable REGU test mux                                          */
      __IOM uint32_t rfafe_test_mux_en : 1;     /*!< [17..17] 1: enable RFAFE test mux                                         */
      __IOM uint32_t pll_test_mux_en : 1;       /*!< [18..18] 1: enable PLL test mux                                           */
    } test_mux_ctrl_b;
  } ;
  
  union {
    __IM  uint32_t sys_system_cfg0;             /*!< (@ 0x000001F0) System Configuration Register0                             */
    
    struct {
      __IM  uint32_t rf_rl_id   : 4;            /*!< [3..0] Vendor ID defined in RF                                            */
      __IM  uint32_t chip_ver   : 4;            /*!< [7..4] Chip version: 0000 : A-cut 0001 : B-cut 0010 : C-cut
                                                     0011 : D-cut ...e.t.c.                                                    */
      __IM  uint32_t vendor_id  : 4;            /*!< [11..8] BIT_VENDOR_ID[3:2] : Process 00: TSMC , 01: SMIC, 10:
                                                     UMC BIT_VENDOR_ID[1] : rsve BIT_VENDOR_ID[0] : 0 : BT do
                                                     not exist in IC 1 : BT exist in IC                                        */
      __IM  uint32_t            : 4;
      __IM  uint32_t chip_type  : 1;            /*!< [16..16] 1: Test chip; 0:MP                                               */
      __IM  uint32_t            : 7;
      __IM  uint32_t bd_opt0    : 1;            /*!< [24..24] BD_OPT0                                                          */
      __IM  uint32_t disable_cck : 1;           /*!< [25..25] BD_OPT1 = Disable_CCK                                            */
      __IM  uint32_t ext_clk    : 1;            /*!< [26..26] BD_OPT2 = EXT_CLK                                                */
      __IM  uint32_t ext_rstb   : 1;            /*!< [27..27] BD_OPT3 = EXT_RSTB                                               */
      __IM  uint32_t            : 2;
      __IM  uint32_t chip_en    : 1;            /*!< [30..30] CHIP_EN PIN input value                                          */
      __IM  uint32_t syscfg_bd_pkg_sel : 1;     /*!< [31..31] Trapped PKG_ENG_SEL value 0: normal package; 1: engineering
                                                     mode                                                                      */
    } sys_system_cfg0_b;
  } ;
  
  union {
    __IOM uint32_t sys_system_cfg1;             /*!< (@ 0x000001F4) System Configuration Register1                             */
    
    struct {
      __IOM uint32_t syscfg_aldn_sts : 1;       /*!< [0..0] 1: SYS CFG autoload done; 0; SYSCFG autoload not ready             */
      __IM  uint32_t            : 7;
      __IM  uint32_t sys_xclk_vld : 1;          /*!< [8..8] Xtal Clock Stable, 1: Clock Stable                                 */
      __IM  uint32_t sys_syspll_clk_rdy : 1;    /*!< [9..9] SYS PLL Clock Stable, 1: Clock Stable                              */
      __IM  uint32_t sys_128k_rdy : 1;          /*!< [10..10] 1: 128K RDY                                                      */
      __IM  uint32_t            : 5;
      __IM  uint32_t v11_vld    : 1;            /*!< [16..16] 1.1V Power Ready, 1: Power Ready                                 */
      __IM  uint32_t            : 7;
      __IM  uint32_t syscfg_trp_efuse_autoload_dis : 1;/*!< [24..24] 1: disable efuse autoload 0: enable efuse autoload        */
      __IM  uint32_t syscfg_trp_spsldo_sel : 1; /*!< [25..25] Trapped Selection for SPS 0: SWR mode; 1: LDO mode               */
      __IM  uint32_t syscfg_trp_test_mode_sel : 1;/*!< [26..26] Trapped Selection for Test mode 0: normal mode; 1:
                                                     test mode                                                                 */
    } sys_system_cfg1_b;
  } ;
  
  union {
    __IOM uint32_t sys_system_cfg2;             /*!< (@ 0x000001F8) System Configuration Register2                             */
    
    struct {
      __IOM uint32_t syscfg_rom_info : 8;       /*!< [7..0] ROM Information                                                    */
    } sys_system_cfg2_b;
  } ;
  __IM  uint32_t  RESERVED16[4];
  
  union {
    __IOM uint32_t platform_cfg;                /*!< (@ 0x0000020C) Platform Configuration Register                            */
    
    struct {
      __IOM uint32_t sys_big_endian : 1;        /*!< [0..0] sys_big_endian                                                     */
      __IOM uint32_t auto_icg_en : 1;           /*!< [1..1] auto_icg_en                                                        */
      __IOM uint32_t dmac_clk_always_en : 1;    /*!< [2..2] dmac_clk_always_en                                                 */
      __IOM uint32_t dmac_clk_always_dis : 1;   /*!< [3..3] dmac_clk_always_dis                                                */
    } platform_cfg_b;
  } ;
  
  union {
    __IOM uint32_t soc_func_en;                 /*!< (@ 0x00000210) SOC Function Enable Control Register                       */
    
    struct {
      __IOM uint32_t soccore_en : 1;            /*!< [0..0] 1: enable SOC block. SoC include: vendor, uart_1&2, i2c,
                                                     SPI, CPU, X-bus, and SDIO off.                                            */
      __IOM uint32_t soc_bus_en : 1;            /*!< [1..1] 1: enable X-bus bus                                                */
      __IOM uint32_t soc_vendor_en : 1;         /*!< [2..2] 1: enable vendor                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t soc_flash_en : 1;          /*!< [4..4] 1: enable flash controller                                         */
      __IM  uint32_t soc_flash_rdy : 1;         /*!< [5..5] 1: Flash ready                                                     */
      __IOM uint32_t soc_lpc_sram_ctrl_en : 1;  /*!< [6..6] 1: enable LPC-SRAM memory controller                               */
      __IOM uint32_t soc_lpc_phy_en : 1;        /*!< [7..7] 1: enable LPC-SRAM PHY                                             */
      __IOM uint32_t soc_cpu_en : 1;            /*!< [8..8] 1: enable CPU                                                      */
      __IM  uint32_t            : 4;
      __IOM uint32_t soc_gdma0_en : 1;          /*!< [13..13] 1: Enable GDMA block                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t soc_gtimer_en : 1;         /*!< [16..16] 1: enable HS GTIMER IP and GTIMER register                       */
      __IOM uint32_t soc_gtimer_int_clk_sel : 1;/*!< [17..17] 0: APB CLK; 1: TIMER CLK                                         */
      __IM  uint32_t            : 2;
      __IOM uint32_t soc_sec_eng_en : 1;        /*!< [20..20] 1: enable security engine IP                                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t soc_flashdl_type : 2;      /*!< [25..24] SW used 0: FW write Flash 8Bytes every time, and erase
                                                     sector before write 1: FW write Flash 8Bytes every time,
                                                     not erase sector before write 2: FW write Flash 256Bytes
                                                     every time, not erase sector before write 3: RSVD                         */
      __IOM uint32_t ram_start_func : 2;        /*!< [27..26] SW used: RAM code startup function index                         */
      __IOM uint32_t sw_rsvd    : 2;            /*!< [29..28] Reserved for SW                                                  */
      __IOM uint32_t soc_wake_from_ps : 1;      /*!< [30..30] Indicates the status of fast booting                             */
      __IOM uint32_t soc_boot_from_jtag : 1;    /*!< [31..31] SW used                                                          */
    } soc_func_en_b;
  } ;
  
  union {
    __IOM uint32_t soc_hci_com_func_en;         /*!< (@ 0x00000214) SOC HCI Function Enable Control Register                   */
    
    struct {
      __IOM uint32_t soc_hci_sdiod_on_en : 1;   /*!< [0..0] 1: enable SDIO device IP ON block                                  */
      __IOM uint32_t soc_hci_sdiod_off_en : 1;  /*!< [1..1] 1: enable SDIO device IP OFF block                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t soc_hci_sdiod_on_rst_mux : 1;/*!< [3..3] 1: Mask WDOG_RST to reset SDIO dev IP ON block                   */
      __IM  uint32_t            : 12;
      __IOM uint32_t soc_wl_macon_en : 1;       /*!< [16..16] 1: enable WLON and WL macro block                                */
      __IOM uint32_t soc_wlmac_rst_mux : 1;     /*!< [17..17] 1: Mask WDOG_RST to reset WLMAN ON block                         */
      __IOM uint32_t soc_wl_axi_en : 1;         /*!< [18..18] 1: enable WL AXI                                                 */
      __IM  uint32_t            : 5;
      __IOM uint32_t soc_bt_en  : 1;            /*!< [24..24] 1: Enale BT block; 0: Reset BT block                             */
      __IOM uint32_t soc_mem_access_right : 1;  /*!< [25..25] 1: switch memory access right to BT, memory clk switch
                                                     to 40Mhz                                                                  */
      __IOM uint32_t soc_mem_clk_en : 1;        /*!< [26..26] 1: enable share memory 60 MHz clk                                */
      __IOM uint32_t soc_jtag_mux_sel : 1;      /*!< [27..27] 1: Jtag switch to BT; 0: :default on SOC                         */
      __IOM uint32_t soc_bt_i2c_en : 1;         /*!< [28..28] 1: enable BT i2c interface mux                                   */
      __IOM uint32_t soc_bt_uart_pin_en : 1;    /*!< [29..29] 1: enable BT uart to pin                                         */
    } soc_hci_com_func_en_b;
  } ;
  
  union {
    __IOM uint32_t soc_peri_func0_en;           /*!< (@ 0x00000218) SOC Peripheral Function Enable Control Register0           */
    
    struct {
      __IOM uint32_t peri_uart0_en : 1;         /*!< [0..0] 1; enable UART0 interface                                          */
      __IOM uint32_t peri_uart1_en : 1;         /*!< [1..1] 1; enable UART1 interface                                          */
      __IOM uint32_t peri_uart2_en : 1;         /*!< [2..2] 1; enable UART2 interface                                          */
      __IOM uint32_t peri_uart3_en : 1;         /*!< [3..3] 1; enable UART3 interface                                          */
      __IOM uint32_t peri_uart0_wdgrst_mask : 1;/*!< [4..4] 1: Mask WDG reset uart0                                            */
      __IM  uint32_t            : 3;
      __IOM uint32_t peri_spi0_en : 1;          /*!< [8..8] 1: enable SPI0 interface                                           */
      __IM  uint32_t            : 7;
      __IOM uint32_t peri_i2c0_en : 1;          /*!< [16..16] 1: enable I2C0 interface                                         */
    } soc_peri_func0_en_b;
  } ;
  
  union {
    __IOM uint32_t soc_peri_func1_en;           /*!< (@ 0x0000021C) SOC Peripheral Function Enable Control Register1           */
    
    struct {
      __IM  uint32_t            : 12;
      __IOM uint32_t pwm_en     : 1;            /*!< [12..12] 1: enable PWM function                                           */
      __IOM uint32_t pwm_int_clk_sel : 1;       /*!< [13..13] 0: APB CLK; 1: TIMER CLK                                         */
    } soc_peri_func1_en_b;
  } ;
  
  union {
    __IOM uint32_t soc_peri_bd_func0_en;        /*!< (@ 0x00000220) SOC Peripheral Bus Domain Function Enable Control
                                                                    Register                                                   */
    
    struct {
      __IOM uint32_t peri_uart0_bd_en : 1;      /*!< [0..0] 1: enable UART0 bus domain                                         */
      __IOM uint32_t peri_uart1_bd_en : 1;      /*!< [1..1] 1: enable UART1 bus domain                                         */
      __IOM uint32_t peri_uart2_bd_en : 1;      /*!< [2..2] 1: enable UART2 bus domain                                         */
      __IOM uint32_t peri_uart3_bd_en : 1;      /*!< [3..3] 1: enable UART3 bus domain                                         */
    } soc_peri_bd_func0_en_b;
  } ;
  __IM  uint32_t  RESERVED17[3];
  
  union {
    __IOM uint32_t pesoc_clk_ctrl;              /*!< (@ 0x00000230) Peripheral Clock Enable Control Register                   */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t soc_cke_plfm : 1;          /*!< [2..2] 1: enable CPU platform clock                                       */
      __IM  uint32_t            : 3;
      __IOM uint32_t soc_pclk_vendor_reg_en : 1;/*!< [6..6] 1: enable vendor reg pclock                                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t soc_clk_flash_en : 1;      /*!< [8..8] 1: enable flash spic_clk                                           */
      __IOM uint32_t soc_clk_lpcsram_en : 1;    /*!< [9..9] 1: enable LPC-SRAM clk                                             */
      __IOM uint32_t soc_clk_lpcsramphy_en : 1; /*!< [10..10] 1: enable LPC-SRAM phy_clk                                       */
      __IM  uint32_t            : 3;
      __IOM uint32_t soc_sclk_hstimer_en : 1;   /*!< [14..14] 1: enable timer clk_cnt                                          */
      __IOM uint32_t soc_pclk_hstimer_en : 1;   /*!< [15..15] 1: enable timer pclock                                           */
      __IOM uint32_t soc_clk_gdma0_en : 1;      /*!< [16..16] 1: enable gdma0 clock                                            */
      __IM  uint32_t            : 3;
      __IOM uint32_t soc_sclk_pwm_en : 1;       /*!< [20..20] 1: enable PWM clk_cnt                                            */
      __IOM uint32_t soc_pclk_pwm_en : 1;       /*!< [21..21] 1: enable PWM pclock                                             */
    } pesoc_clk_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t pesoc_peri_clk_ctrl0;        /*!< (@ 0x00000234) Peripheral Clock Enable Control Register0                  */
    
    struct {
      __IOM uint32_t soc_sclk_uart0_en : 1;     /*!< [0..0] 1; enable UART0 sclock                                             */
      __IOM uint32_t soc_pclk_uart0_en : 1;     /*!< [1..1] 1; enable UART0 pclock                                             */
      __IOM uint32_t soc_sclk_uart1_en : 1;     /*!< [2..2] 1; enable UART1 sclock                                             */
      __IOM uint32_t soc_pclk_uart1_en : 1;     /*!< [3..3] 1; enable UART1 pclock                                             */
      __IOM uint32_t soc_sclk_uart2_en : 1;     /*!< [4..4] 1; enable UART2 sclock                                             */
      __IOM uint32_t soc_pclk_uart2_en : 1;     /*!< [5..5] 1; enable UART2 pclock                                             */
      __IOM uint32_t soc_sclk_uart3_en : 1;     /*!< [6..6] 1; enable UART3 sclock                                             */
      __IOM uint32_t soc_pclk_uart3_en : 1;     /*!< [7..7] 1; enable UART3 pclock                                             */
      __IM  uint32_t            : 8;
      __IOM uint32_t soc_sclk_spi0_en : 1;      /*!< [16..16] 1; enable SPI0 ssi_clk                                           */
      __IOM uint32_t soc_pclk_spi0_en : 1;      /*!< [17..17] 1; enable SPI0 pclock                                            */
    } pesoc_peri_clk_ctrl0_b;
  } ;
  
  union {
    __IOM uint32_t pesoc_peri_clk_ctrl1;        /*!< (@ 0x00000238) Peripheral Clock Enable Control Register1                  */
    
    struct {
      __IOM uint32_t soc_sclk_i2c0_en : 1;      /*!< [0..0] 1: enable I2C0 ic_clk                                              */
      __IOM uint32_t soc_pclk_i2c0_en : 1;      /*!< [1..1] 1; enable I2C0 pclock                                              */
    } pesoc_peri_clk_ctrl1_b;
  } ;
  __IM  uint32_t  RESERVED18;
  
  union {
    __IOM uint32_t pesoc_hci_clk_ctrl0;         /*!< (@ 0x00000240) Peripheral HCI Clock Enable Control Register               */
    
    struct {
      __IOM uint32_t soc_anaclk_sdio_dev_en : 1;/*!< [0..0] 1: enable SDIO_DEV ANA clock                                       */
      __IOM uint32_t soc_pclk_sdio_dev_en : 1;  /*!< [1..1] 1; enable SDIO_DEV H clock                                         */
    } pesoc_hci_clk_ctrl0_b;
  } ;
  
  union {
    __IOM uint32_t pesoc_com_clk_ctrl1;         /*!< (@ 0x00000244) SOC Common Clock Enable Control Register                   */
    
    struct {
      __IOM uint32_t soc_wl_anaclk_en : 1;      /*!< [0..0] 1: enable WL ANA clock                                             */
      __IOM uint32_t soc_wl_axiclk_en : 1;      /*!< [1..1] 1: enable WL AXI clock                                             */
      __IOM uint32_t soc_wl_32k_en : 1;         /*!< [2..2] 1: enable WL 32K clock                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t soc_clk_security_eng_en : 1;/*!< [4..4] 1: enable security engine clock                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t soc_32kclk_bt_en : 1;      /*!< [8..8] 1: enable BT 32kHz clock                                           */
      __IOM uint32_t soc_40mclk_bt_en : 1;      /*!< [9..9] 1: enable BT 40MHz clock                                           */
    } pesoc_com_clk_ctrl1_b;
  } ;
  __IM  uint32_t  RESERVED19[2];
  
  union {
    __IOM uint32_t pesoc_clk_sel;               /*!< (@ 0x00000250) Peripheral Clock Selection Register                        */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t pesoc_ck_scale : 2;        /*!< [17..16] PLL clock divided by N: 2b'00: N=1, 2b'01: N=2 (/2),
                                                     2b'02: N=4 (/4)                                                           */
    } pesoc_clk_sel_b;
  } ;
  __IM  uint32_t  RESERVED20[45];
  
  union {
    __IOM uint32_t pesoc_peri_ctrl;             /*!< (@ 0x00000308) SOC Peripheral Control Register                            */
    
    struct {
      __IM  uint32_t            : 8;
      __IOM uint32_t soc_func_spi_rn : 1;       /*!< [8..8] 1: master 0: slave                                                 */
    } pesoc_peri_ctrl_b;
  } ;
  __IM  uint32_t  RESERVED21[5];
  
  union {
    __IOM uint32_t rm_cfg0;                     /*!< (@ 0x00000320) Read Margin Configuration Register0                        */
    
    struct {
      __IOM uint32_t rm_synopsys_platform_120 : 4;/*!< [3..0] read margins                                                     */
      __IOM uint32_t rm_synopsys_bt_40 : 4;     /*!< [7..4] read margins                                                       */
      __IOM uint32_t rm_synopsys_wlbb_80 : 4;   /*!< [11..8] read margins                                                      */
      __IOM uint32_t rm_synopsys_wlbb_160 : 4;  /*!< [15..12] read margins                                                     */
      __IOM uint32_t rm_rtk_platform_120 : 4;   /*!< [19..16] read margins                                                     */
      __IOM uint32_t rm_rtk_dtcm_120 : 4;       /*!< [23..20] read margins                                                     */
      __IOM uint32_t rm_synopsys_wlmac_40 : 4;  /*!< [27..24] read margins                                                     */
      __IOM uint32_t rm_synopsys_wlmac_160 : 4; /*!< [31..28] read margin of wlamac 160hz memory.                              */
    } rm_cfg0_b;
  } ;
  
  union {
    __IOM uint32_t rm_cfg1;                     /*!< (@ 0x00000324) Read Margin Configuration Register1                        */
    
    struct {
      __IOM uint32_t rm_synopsys_wlmac_60 : 4;  /*!< [3..0] read margins                                                       */
      __IOM uint32_t rm_synopsys_sdio : 4;      /*!< [7..4] read margins                                                       */
      __IOM uint32_t rm_synopsys_share : 4;     /*!< [11..8] read margins                                                      */
      __IOM uint32_t rm_synopsys_bt_rom : 4;    /*!< [15..12] read margins                                                     */
      __IOM uint32_t rm_synopsys_itcm_rom : 4;  /*!< [19..16] read margins                                                     */
      __IOM uint32_t rm_synopsys_wmac_rom : 4;  /*!< [23..20] read margins                                                     */
    } rm_cfg1_b;
  } ;
  
  union {
    __IOM uint32_t rme_cfg;                     /*!< (@ 0x00000328) Read Margin Enable Configuration Register                  */
    
    struct {
      __IOM uint32_t rme_synopsys_platform_120 : 1;/*!< [0..0] rme_synopsys_platform_120                                       */
      __IOM uint32_t rme_synopsys_bt_80 : 1;    /*!< [1..1] rme_synopsys_bt_80                                                 */
      __IOM uint32_t rme_synopsys_wlbb_80 : 1;  /*!< [2..2] rme_synopsys_wlbb_80                                               */
      __IOM uint32_t rme_synopsys_wlbb_160 : 1; /*!< [3..3] rme_synopsys_wlbb_160                                              */
      __IOM uint32_t saw_rtk_platform_120 : 2;  /*!< [5..4] saw_rtk_platform_120                                               */
      __IOM uint32_t saw_rtk_dtcm_120 : 2;      /*!< [7..6] saw_rtk_dtcm_120                                                   */
      __IOM uint32_t rme_synopsys_wlmac_40 : 1; /*!< [8..8] rme_synopsys_wlmac_40                                              */
      __IOM uint32_t rme_synopsys_wlmac_160 : 1;/*!< [9..9] rme_synopsys_wlmac_160                                             */
      __IOM uint32_t rme_synopsys_wlmac_60 : 1; /*!< [10..10] rme_synopsys_wlmac_60                                            */
      __IOM uint32_t rme_synopsys_sdio : 1;     /*!< [11..11] rme_synopsys_sdio                                                */
      __IOM uint32_t rme_synopsys_share : 1;    /*!< [12..12] rme_synopsys_share                                               */
      __IOM uint32_t rme_synopsys_bt_rom : 1;   /*!< [13..13] rme_synopsys_bt_rom                                              */
      __IOM uint32_t rme_synopsys_itcm_rom : 1; /*!< [14..14] rme_synopsys_itcm_rom                                            */
      __IOM uint32_t rme_synopsys_wlmac_rom : 1;/*!< [15..15] rme_synopsys_wlmac_rom                                           */
    } rme_cfg_b;
  } ;
  __IM  uint32_t  RESERVED22[50];
  
  union {
    __IOM uint32_t peon_status;                 /*!< (@ 0x000003F4) Peripheral On Status Register                              */
    
    struct {
      __IOM uint32_t peon_sdio_aldn : 1;        /*!< [0..0] 1: SDIO Config autoload done; 0: autoload not ready                */
    } peon_status_b;
  } ;
} SYSON_Type;                                   /*!< Size = 1016 (0x3f8)                                                       */



/* =========================================================================================================================== */
/* ================                                          SYSON_S                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief System Secure Region Control (SYSON_S)
  */

typedef struct {                                /*!< (@ 0x50000800) SYSON_S Structure                                          */
  
  union {
    __IOM uint32_t sce_clk_ctrl;                /*!< (@ 0x00000000) SCE Clock Control Register                                 */
    
    struct {
      __IOM uint32_t flash_sce_clk_en : 1;      /*!< [0..0] 1: Enable flash SCE CLK                                            */
    } sce_clk_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t sce_func_ctrl;               /*!< (@ 0x00000004) SCE Function Control Register                              */
    
    struct {
      __IOM uint32_t flash_sce_en : 1;          /*!< [0..0] 1: Enable flash SCE                                                */
    } sce_func_ctrl_b;
  } ;
  
  union {
    __IOM uint32_t sec_attr_ctrl;               /*!< (@ 0x00000008) Peripheral device secure attribure control register        */
    
    struct {
      __IOM uint32_t wlan_sec_en : 1;           /*!< [0..0] WLAN secure attribute configuration: 0: WLan is a non-secure
                                                     device 1: WLan is a secure device                                         */
      __IOM uint32_t sdio_sec_en : 1;           /*!< [1..1] SDIO device secure attribute configuration: 0: SDIO device
                                                     is a non-secure device 1: SDIO device is a secure device                  */
    } sec_attr_ctrl_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t sce_flash_ctrl0;             /*!< (@ 0x00000010) SCE Flash Control Register 0                               */
    
    struct {
      __IOM uint32_t sce_flash_op_addr : 8;     /*!< [7..0] When you want to read or write data from or to SCE register,
                                                     you need to fill the address to this register at first.
                                                     Uint: 4 bytes Ex: REG_SECURE_CTRL[7:0] = 0x2 represent
                                                     that SCE register is 0x08.                                                */
    } sce_flash_ctrl0_b;
  } ;
  
  union {
    __IOM uint32_t sce_flash_ctrl1;             /*!< (@ 0x00000014) SCE Flash Control Register 1                               */
    
    struct {
      __IOM uint32_t sce_flash_op_data : 32;    /*!< [31..0] There are two operation in this register. One is reading
                                                     process and the other is writing process. Reading Process:
                                                     read data from SCE register according to REG_SCE_CONFIG[7:0].
                                                     Writing Process: write data to SCE register according to
                                                     REG_SCE_CONFIG[7:0].                                                      */
    } sce_flash_ctrl1_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t sec_efuse_ctrl0;             /*!< (@ 0x00000020) SCE eFuse Control Register 0                               */
    
    struct {
      __IOM uint32_t sec_ef_data : 8;           /*!< [7..0] Access Data                                                        */
      __IOM uint32_t sec_ef_addr : 10;          /*!< [17..8] Access Address                                                    */
      __IM  uint32_t            : 13;
      __IOM uint32_t sec_ef_rwflag : 1;         /*!< [31..31] Write 1 for Program; Write 0 for Read Access                     */
    } sec_efuse_ctrl0_b;
  } ;
} SYSON_S_Type;                                 /*!< Size = 36 (0x24)                                                          */


/** @} */ /* End of group hal_syson_reg */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup syson_peripheralAddr SysOn Registers Base Address
  * @ingroup hs_hal_syson
  * @{
  */

#define SYSON_BASE                  0x40000000UL
#define SYSON_S_BASE                0x50000800UL

/** @} */ /* End of group syson_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup syson_type_declaration SysOn Device Type
  * @ingroup hs_hal_syson
  * @{
  */

#define SYSON                       ((SYSON_Type*)             SYSON_BASE)
#define SYSON_S                     ((SYSON_S_Type*)           SYSON_S_BASE)

/** @} */ /* End of group syson_type_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif

#include "rtl8710c_syson_type.h"
#include "rtl8710c_syson_s_type.h"

/**
  \brief  The data structure to export the SysOn API functions in ROM.
*/
typedef struct hal_syson_func_stubs_s {
    uint32_t (*hal_syson_query_sys_clk) (void);
    void (*hal_syson_set_sys_clk) (sys_clock_rate_t sys_clk);
    void (*hal_syson_reg_wake_event_handler) (sys_wake_event_t event, syson_irq_handler_t handler, uint32_t arg);
    void (*hal_syson_unreg_wake_event_handler) (sys_wake_event_t event);
    void (*hal_syson_enable_wake_event) (sys_wake_event_t event);
    void (*hal_syson_disable_wake_event) (sys_wake_event_t event);
    void (*hal_syson_reg_irq) (int_vector_t handler);
    void (*hal_syson_init) (hal_syson_adapter_t *psyson_adp);

    // B-Cut
    hal_status_t (*hal_sys_set_fast_boot) (uint32_t pstart_tbl, uint32_t func_idx);
    uint32_t reserved[15];  // reserved space for next ROM code version function table extending.
} hal_syson_func_stubs_t;

/**
 * @addtogroup hs_hal_syson_rom_func
 * @{
 */

void hal_syson_sys_clk_sel_rtl8710c (uint32_t clk_src, uint32_t clk_sel);
void hal_syson_sys_clk_div_rtl8710c (uint32_t dev_en, uint32_t dev_sel);
uint32_t hal_syson_query_sys_clk_rtl8710c (void);
void hal_syson_set_sys_clk_rtl8710c (sys_clock_rate_t sys_clk);
void hal_syson_reg_wake_event_handler_rtl8710c (sys_wake_event_t event, syson_irq_handler_t handler, uint32_t arg);
void hal_syson_unreg_wake_event_handler_rtl8710c (sys_wake_event_t event);
void hal_syson_enable_wake_event_rtl8710c (sys_wake_event_t event);
void hal_syson_disable_wake_event_rtl8710c (sys_wake_event_t event);
void hal_syson_reg_irq_rtl8710c (int_vector_t handler);
void hal_syson_init_rtl8710c (hal_syson_adapter_t *psyson_adp);
hal_status_t hal_sys_set_fast_boot_rtl8710c (uint32_t pstart_tbl, uint32_t func_idx);

/** @} */ /* End of group hs_hal_syson_rom_func */
/** @} */ /* End of group rtl8710c_syson */
   
/// @endcond /* End of condition DOXYGEN_SYSON_REG_TYPE */
    

#ifdef __cplusplus
}
#endif

#endif /* RTL8710C_SYSON_H */

