/*
 * Copyright(c) 2007 - 2016 Realtek Corporation. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     rtl8195bhp_psram_ctrl.h
 * @brief    CMSIS HeaderFile
 * @version  1.0
 * @date     08. December 2017
 * @note     Generated by SVDConv V3.3.9 on Friday, 08.12.2017 18:18:51
 *           from File 'rtl8195b-hp-psram_ctrl.svd',
 *           last modified on Friday, 08.12.2017 10:18:32
 */


#ifndef RTL8195BHP_PSRAM_CTRL_H
#define RTL8195BHP_PSRAM_CTRL_H

#ifdef __cplusplus
extern "C" {
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                        PSRAM_CTRL                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief PSRAM Controller (PSRAM_CTRL)
  */

typedef struct {                                /*!< (@ 0x40600000) PSRAM_CTRL Structure                                       */

  union {
    __IOM uint32_t ccr;                         /*!< (@ 0x00000000) Configuration Control Register                             */

    struct {
      __IOM uint32_t init       : 1;            /*!< [0..0] Start to issue PSRAM initialization sequence                       */

      __IM  uint32_t            : 2;
      __IOM uint32_t dpin       : 1;            /*!< [3..3] Start to set PSRAM command function.                               */

      __IM  uint32_t            : 4;
      __IOM uint32_t flush_fifo : 1;            /*!< [8..8] Flush all FIFO in PSRAM_CTRL                                       */
    } ccr_b;
  } ;

  union {
    __IOM uint32_t dcr;                         /*!< (@ 0x00000004) DRAM Configuration Control Register                        */

    struct {
      __IOM uint32_t dq32       : 1;            /*!< [0..0] Setting the architecture is 2 x 16-Bit PSRAM. It is valid
                                                     to set if the hardware architecture is valid configuration.               */
      __IM  uint32_t            : 1;
      __IOM uint32_t async_mode : 1;            /*!< [2..2] Indicate the PSRAM work at Asynchronous mode or Synchronous
                                                     mode                                                                      */
      __IOM uint32_t ddr_mode   : 1;            /*!< [3..3] Indicate the PSRAM work at DDR mode or SDR mode                    */
      __IOM uint32_t dfi_rate   : 3;            /*!< [6..4] Setting DFI ratio                                                  */
      __IOM uint32_t cre_en     : 1;            /*!< [7..7] Indicate access PSRAM register mode                                */
      __IOM uint32_t clk_en     : 1;            /*!< [8..8] Indicate PSRAM at asynchronous mode clock enable                   */
      __IOM uint32_t suspend_en : 1;            /*!< [9..9] Indicate PSRAM_CTRL support SUSPEND command                        */

      __IM  uint32_t            : 6;
      __IOM uint32_t page_size  : 4;            /*!< [19..16] Indicate the target PSRAM page size                              */
      __IOM uint32_t aadmux     : 1;            /*!< [20..20] Indicate the target PSRAM is AADMUX type or ADMUX or
                                                     normal type                                                               */
    } dcr_b;
  } ;

  union {
    __IOM uint32_t iocr0;                       /*!< (@ 0x00000008) I/O Configuration Control Register 0                       */

    struct {
      __IOM uint32_t dfi_cs_wr_dly : 4;         /*!< [3..0] Setting the latency contrast between PHY read data enable
                                                     path latency and PHY command path latency.                                */
      __IOM uint32_t dfi_cs_rd_dly : 4;         /*!< [7..4] Setting the latency contrast between PHY write data path
                                                     latency and PHY command path latency.                                     */
      __IOM uint32_t rd_pipe    : 4;            /*!< [11..8] Setting the extra delay latency of PHY latency for SDR
                                                     mode read data.                                                           */
      __IOM uint32_t tphy_wrdata : 5;           /*!< [16..12] Setting the delay latency from DFI write command to
                                                     DFI write data.                                                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t tphy_rddata_en : 5;        /*!< [24..20] Setting the delay latency from DFI read command to
                                                     dfi_rddata_en signal.                                                     */
      __IOM uint32_t dfi_path_dly : 5;          /*!< [29..25] Setting the delay latency DFI command path latency
                                                     add dfi_psram_wait signal path latency.                                   */
    } iocr0_b;
  } ;

  union {
    __IOM uint32_t csr;                         /*!< (@ 0x0000000C) Controller Status Register                                 */

    struct {
      __IM  uint32_t            : 8;
      __IOM uint32_t mem_idle   : 1;            /*!< [8..8] Disable memory access state                                        */

      __IM  uint32_t            : 8;
      __IOM uint32_t dpin_mode  : 2;            /*!< [18..17] DPIN mode decode                                                 */
    } csr_b;
  } ;

  union {
    __IOM uint32_t drr;                         /*!< (@ 0x00000010) DRAM Refresh Control Register                              */

    struct {
      __IOM uint32_t tcph       : 4;            /*!< [3..0] PSRAM CE# pin HIGH cycles between subsequent command               */
      __IOM uint32_t tcem       : 11;           /*!< [14..4] Maximum average Refresh commands delay cycles. Every
                                                     tCEM a Refresh opportunity must be provided                               */
      __IOM uint32_t tpu        : 7;            /*!< [21..15] For PSRAM initiation flow, it has to wait tPU                    */
    } drr_b;
  } ;

  union {
    __IOM uint32_t tpr0;                        /*!< (@ 0x00000014) DRAM Timing Parameter Register 0                           */

    struct {
      __IOM uint32_t trc        : 6;            /*!< [5..0] PSRAM asynchronous Read operation Read cycle time.                 */
      __IOM uint32_t twc        : 6;            /*!< [11..6] PSRAM asynchronous Write operation Write cycle time.              */
      __IOM uint32_t twph       : 3;            /*!< [14..12] PSRAM asynchronous Write operation Write pulse width
                                                     HIGH.                                                                     */
      __IOM uint32_t twp        : 5;            /*!< [19..15] PSRAM asynchronous Write operation Write pulse width.            */
      __IOM uint32_t toe        : 4;            /*!< [23..20] PSPAM asynchronous Read operation output enable to
                                                     valid output                                                              */
    } tpr0_b;
  } ;

  union {
    __IOM uint32_t tpr1;                        /*!< (@ 0x00000018) DRAM Timing Parameter Register 1                           */

    struct {
      __IOM uint32_t tcvs       : 2;            /*!< [1..0] PSRAM asynchronous operation CE# pin LOW to ADV# pin
                                                     HIGH.                                                                     */
      __IOM uint32_t tavh       : 2;            /*!< [3..2] PSRAM asynchronous operation Address hold from ADV# pin
                                                     HIGH.                                                                     */
      __IOM uint32_t tvp        : 2;            /*!< [5..4] PSRAM asynchronous operation ADV# pin pulse width LOW.             */
      __IOM uint32_t tos        : 2;            /*!< [7..6] PSRAM asynchronous operation OE# pin HIGH setup time
                                                     to ADV# pin LOW.                                                          */
      __IOM uint32_t toh        : 2;            /*!< [9..8] PSRAM asynchronous Read operation OE# pin hold after
                                                     ADV# pin HIGH.                                                            */
    } tpr1_b;
  } ;
  __IM  uint32_t  RESERVED[3];

  union {
    __IOM uint32_t cmd_dpin;                    /*!< (@ 0x00000028) Command Data Pin Register                                  */

    struct {
      __IOM uint32_t addr       : 24;           /*!< [23..0] If DPIN operate at Write/Read data mode, indicate the
                                                     value of address.                                                         */
    } cmd_dpin_b;
  } ;
  __IM  uint32_t  RESERVED1;

  union {
    __IOM uint32_t mr_info;                     /*!< (@ 0x00000030) Mode Latency Information Register                          */

    struct {
      __IOM uint32_t wl         : 5;            /*!< [4..0] Indicate PSRAM write latency counter.                              */
      __IOM uint32_t rl         : 5;            /*!< [9..5] Indicate PSRAM write latency counter.                              */
    } mr_info_b;
  } ;

  union {
    __IOM uint32_t mr0;                         /*!< (@ 0x00000034) DRAM Mode Register 0                                       */

    struct {
      __IOM uint32_t mr0        : 32;           /*!< [31..0] Setting the value to PSRAM BCR register in initialization
                                                     flow.                                                                     */
    } mr0_b;
  } ;

  union {
    __IOM uint32_t mr1;                         /*!< (@ 0x00000038) DRAM Mode Register 1                                       */

    struct {
      __IOM uint32_t mr1        : 32;           /*!< [31..0] Setting the value to PSRAM RCR register in initialization
                                                     flow.                                                                     */
    } mr1_b;
  } ;
  __IM  uint32_t  RESERVED2[5];

  union {
    __IOM uint32_t iocr1;                       /*!< (@ 0x00000050) I/O Configuration Control Register 1                       */

    struct {
      __IOM uint32_t dfi_cke_wr_dly : 4;        /*!< [3..0] Setting the delay latency from SUSPEND command to dfi_psram_ck_en
                                                     signal during WRITE transaction.                                          */
      __IOM uint32_t dfi_cke_rd_dly : 4;        /*!< [7..4] Setting the delay latency from SUSPEND command to dfi_psram_ck_en
                                                     signal during READ transaction.                                           */
      __IOM uint32_t dfi_cke_cmd_dly : 4;       /*!< [11..8] Setting the delay latency from SUSPEND command to dfi_psram_ck_en
                                                     signal during access PSRAM register.                                      */
    } iocr1_b;
  } ;
  __IM  uint32_t  RESERVED3[3];

  union {
    __IOM uint32_t dpdri;                       /*!< (@ 0x00000060) DPIN data index Register                                   */

    struct {
      __IOM uint32_t dpin_data_index : 4;       /*!< [3..0] Indicate select which DPIN DATA register                           */
    } dpdri_b;
  } ;

  union {
    __IOM uint32_t dpdr;                        /*!< (@ 0x00000064) DPIN data Register                                         */

    struct {
      __IOM uint32_t dpin_data  : 32;           /*!< [31..0] Indicate the data which will be written to PSRAM or
                                                     the data read from PSRAM                                                  */
    } dpdr_b;
  } ;
  __IM  uint32_t  RESERVED4[35];

  union {
    __IOM uint32_t pctl_svn_id;                 /*!< (@ 0x000000F4) PCTL Version ID Register                                   */

    struct {
      __IOM uint32_t release_date : 16;         /*!< [15..0] Indicate the IP release date for the particular project           */
      __IOM uint32_t svn_num    : 16;           /*!< [31..16] Indicate the SVN number of the released RTL code                 */
    } pctl_svn_id_b;
  } ;

  union {
    __IOM uint32_t pctl_idr;                    /*!< (@ 0x000000F8) PCTL Identification Register                               */

    struct {
      __IOM uint32_t cr_pctl_def : 16;          /*!< [15..0] If user ties this field at input port tie, it indicates
                                                     user definition. Or it only shows one main support DRAM
                                                     type.                                                                     */
      __IOM uint32_t cr_ver     : 16;           /*!< [31..16] The control register version number                              */
    } pctl_idr_b;
  } ;
} PSRAM_CTRL_Type;                              /*!< Size = 252 (0xfc)                                                         */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define PSRAM_CTRL_BASE             0x40600000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define PSRAM_CTRL                  ((PSRAM_CTRL_Type *)        PSRAM_CTRL_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */



#ifdef __cplusplus
}
#endif

#endif /* RTL8195BHP_PSRAM_CTRL_H */

